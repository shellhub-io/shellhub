// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/shellhub-io/shellhub/pkg/models"
	mock "github.com/stretchr/testify/mock"

	query "github.com/shellhub-io/shellhub/pkg/api/query"

	store "github.com/shellhub-io/shellhub/api/store"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// APIKeyConflicts provides a mock function with given fields: ctx, tenantID, target
func (_m *Store) APIKeyConflicts(ctx context.Context, tenantID string, target *models.APIKeyConflicts) ([]string, bool, error) {
	ret := _m.Called(ctx, tenantID, target)

	if len(ret) == 0 {
		panic("no return value specified for APIKeyConflicts")
	}

	var r0 []string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.APIKeyConflicts) ([]string, bool, error)); ok {
		return rf(ctx, tenantID, target)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.APIKeyConflicts) []string); ok {
		r0 = rf(ctx, tenantID, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.APIKeyConflicts) bool); ok {
		r1 = rf(ctx, tenantID, target)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *models.APIKeyConflicts) error); ok {
		r2 = rf(ctx, tenantID, target)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// APIKeyCreate provides a mock function with given fields: ctx, APIKey
func (_m *Store) APIKeyCreate(ctx context.Context, APIKey *models.APIKey) (string, error) {
	ret := _m.Called(ctx, APIKey)

	if len(ret) == 0 {
		panic("no return value specified for APIKeyCreate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.APIKey) (string, error)); ok {
		return rf(ctx, APIKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.APIKey) string); ok {
		r0 = rf(ctx, APIKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.APIKey) error); ok {
		r1 = rf(ctx, APIKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIKeyDelete provides a mock function with given fields: ctx, tenantID, name
func (_m *Store) APIKeyDelete(ctx context.Context, tenantID string, name string) error {
	ret := _m.Called(ctx, tenantID, name)

	if len(ret) == 0 {
		panic("no return value specified for APIKeyDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tenantID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIKeyGet provides a mock function with given fields: ctx, id
func (_m *Store) APIKeyGet(ctx context.Context, id string) (*models.APIKey, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for APIKeyGet")
	}

	var r0 *models.APIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.APIKey, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.APIKey); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIKeyGetByName provides a mock function with given fields: ctx, tenantID, name
func (_m *Store) APIKeyGetByName(ctx context.Context, tenantID string, name string) (*models.APIKey, error) {
	ret := _m.Called(ctx, tenantID, name)

	if len(ret) == 0 {
		panic("no return value specified for APIKeyGetByName")
	}

	var r0 *models.APIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.APIKey, error)); ok {
		return rf(ctx, tenantID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.APIKey); ok {
		r0 = rf(ctx, tenantID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenantID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIKeyList provides a mock function with given fields: ctx, tenantID, paginator, sorter
func (_m *Store) APIKeyList(ctx context.Context, tenantID string, paginator query.Paginator, sorter query.Sorter) ([]models.APIKey, int, error) {
	ret := _m.Called(ctx, tenantID, paginator, sorter)

	if len(ret) == 0 {
		panic("no return value specified for APIKeyList")
	}

	var r0 []models.APIKey
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, query.Paginator, query.Sorter) ([]models.APIKey, int, error)); ok {
		return rf(ctx, tenantID, paginator, sorter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, query.Paginator, query.Sorter) []models.APIKey); ok {
		r0 = rf(ctx, tenantID, paginator, sorter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, query.Paginator, query.Sorter) int); ok {
		r1 = rf(ctx, tenantID, paginator, sorter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, query.Paginator, query.Sorter) error); ok {
		r2 = rf(ctx, tenantID, paginator, sorter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// APIKeyUpdate provides a mock function with given fields: ctx, tenantID, name, changes
func (_m *Store) APIKeyUpdate(ctx context.Context, tenantID string, name string, changes *models.APIKeyChanges) error {
	ret := _m.Called(ctx, tenantID, name, changes)

	if len(ret) == 0 {
		panic("no return value specified for APIKeyUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *models.APIKeyChanges) error); ok {
		r0 = rf(ctx, tenantID, name, changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceBulkDeleteTag provides a mock function with given fields: ctx, tenant, tag
func (_m *Store) DeviceBulkDeleteTag(ctx context.Context, tenant string, tag string) (int64, error) {
	ret := _m.Called(ctx, tenant, tag)

	if len(ret) == 0 {
		panic("no return value specified for DeviceBulkDeleteTag")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int64, error)); ok {
		return rf(ctx, tenant, tag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, tenant, tag)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenant, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceBulkRenameTag provides a mock function with given fields: ctx, tenant, currentTag, newTag
func (_m *Store) DeviceBulkRenameTag(ctx context.Context, tenant string, currentTag string, newTag string) (int64, error) {
	ret := _m.Called(ctx, tenant, currentTag, newTag)

	if len(ret) == 0 {
		panic("no return value specified for DeviceBulkRenameTag")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (int64, error)); ok {
		return rf(ctx, tenant, currentTag, newTag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, tenant, currentTag, newTag)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenant, currentTag, newTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceChooser provides a mock function with given fields: ctx, tenantID, chosen
func (_m *Store) DeviceChooser(ctx context.Context, tenantID string, chosen []string) error {
	ret := _m.Called(ctx, tenantID, chosen)

	if len(ret) == 0 {
		panic("no return value specified for DeviceChooser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, tenantID, chosen)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceCreate provides a mock function with given fields: ctx, d, hostname
func (_m *Store) DeviceCreate(ctx context.Context, d models.Device, hostname string) error {
	ret := _m.Called(ctx, d, hostname)

	if len(ret) == 0 {
		panic("no return value specified for DeviceCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Device, string) error); ok {
		r0 = rf(ctx, d, hostname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceDelete provides a mock function with given fields: ctx, uid
func (_m *Store) DeviceDelete(ctx context.Context, uid models.UID) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for DeviceDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceGet provides a mock function with given fields: ctx, uid
func (_m *Store) DeviceGet(ctx context.Context, uid models.UID) (*models.Device, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for DeviceGet")
	}

	var r0 *models.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) (*models.Device, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) *models.Device); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UID) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceGetByMac provides a mock function with given fields: ctx, mac, tenantID, status
func (_m *Store) DeviceGetByMac(ctx context.Context, mac string, tenantID string, status models.DeviceStatus) (*models.Device, error) {
	ret := _m.Called(ctx, mac, tenantID, status)

	if len(ret) == 0 {
		panic("no return value specified for DeviceGetByMac")
	}

	var r0 *models.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, models.DeviceStatus) (*models.Device, error)); ok {
		return rf(ctx, mac, tenantID, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, models.DeviceStatus) *models.Device); ok {
		r0 = rf(ctx, mac, tenantID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, models.DeviceStatus) error); ok {
		r1 = rf(ctx, mac, tenantID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceGetByName provides a mock function with given fields: ctx, name, tenantID, status
func (_m *Store) DeviceGetByName(ctx context.Context, name string, tenantID string, status models.DeviceStatus) (*models.Device, error) {
	ret := _m.Called(ctx, name, tenantID, status)

	if len(ret) == 0 {
		panic("no return value specified for DeviceGetByName")
	}

	var r0 *models.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, models.DeviceStatus) (*models.Device, error)); ok {
		return rf(ctx, name, tenantID, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, models.DeviceStatus) *models.Device); ok {
		r0 = rf(ctx, name, tenantID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, models.DeviceStatus) error); ok {
		r1 = rf(ctx, name, tenantID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceGetByUID provides a mock function with given fields: ctx, uid, tenantID
func (_m *Store) DeviceGetByUID(ctx context.Context, uid models.UID, tenantID string) (*models.Device, error) {
	ret := _m.Called(ctx, uid, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for DeviceGetByUID")
	}

	var r0 *models.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, string) (*models.Device, error)); ok {
		return rf(ctx, uid, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, string) *models.Device); ok {
		r0 = rf(ctx, uid, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UID, string) error); ok {
		r1 = rf(ctx, uid, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceGetTags provides a mock function with given fields: ctx, tenant
func (_m *Store) DeviceGetTags(ctx context.Context, tenant string) ([]string, int, error) {
	ret := _m.Called(ctx, tenant)

	if len(ret) == 0 {
		panic("no return value specified for DeviceGetTags")
	}

	var r0 []string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, int, error)); ok {
		return rf(ctx, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, tenant)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, tenant)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeviceList provides a mock function with given fields: ctx, status, pagination, filters, sorter, acceptable
func (_m *Store) DeviceList(ctx context.Context, status models.DeviceStatus, pagination query.Paginator, filters query.Filters, sorter query.Sorter, acceptable store.DeviceAcceptable) ([]models.Device, int, error) {
	ret := _m.Called(ctx, status, pagination, filters, sorter, acceptable)

	if len(ret) == 0 {
		panic("no return value specified for DeviceList")
	}

	var r0 []models.Device
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DeviceStatus, query.Paginator, query.Filters, query.Sorter, store.DeviceAcceptable) ([]models.Device, int, error)); ok {
		return rf(ctx, status, pagination, filters, sorter, acceptable)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DeviceStatus, query.Paginator, query.Filters, query.Sorter, store.DeviceAcceptable) []models.Device); ok {
		r0 = rf(ctx, status, pagination, filters, sorter, acceptable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DeviceStatus, query.Paginator, query.Filters, query.Sorter, store.DeviceAcceptable) int); ok {
		r1 = rf(ctx, status, pagination, filters, sorter, acceptable)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.DeviceStatus, query.Paginator, query.Filters, query.Sorter, store.DeviceAcceptable) error); ok {
		r2 = rf(ctx, status, pagination, filters, sorter, acceptable)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeviceListByUsage provides a mock function with given fields: ctx, tenantID
func (_m *Store) DeviceListByUsage(ctx context.Context, tenantID string) ([]models.UID, error) {
	ret := _m.Called(ctx, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for DeviceListByUsage")
	}

	var r0 []models.UID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.UID, error)); ok {
		return rf(ctx, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.UID); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceLookup provides a mock function with given fields: ctx, namespace, hostname
func (_m *Store) DeviceLookup(ctx context.Context, namespace string, hostname string) (*models.Device, error) {
	ret := _m.Called(ctx, namespace, hostname)

	if len(ret) == 0 {
		panic("no return value specified for DeviceLookup")
	}

	var r0 *models.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Device, error)); ok {
		return rf(ctx, namespace, hostname)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Device); ok {
		r0 = rf(ctx, namespace, hostname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, hostname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicePullTag provides a mock function with given fields: ctx, uid, tag
func (_m *Store) DevicePullTag(ctx context.Context, uid models.UID, tag string) error {
	ret := _m.Called(ctx, uid, tag)

	if len(ret) == 0 {
		panic("no return value specified for DevicePullTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, string) error); ok {
		r0 = rf(ctx, uid, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DevicePushTag provides a mock function with given fields: ctx, uid, tag
func (_m *Store) DevicePushTag(ctx context.Context, uid models.UID, tag string) error {
	ret := _m.Called(ctx, uid, tag)

	if len(ret) == 0 {
		panic("no return value specified for DevicePushTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, string) error); ok {
		r0 = rf(ctx, uid, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceRemovedCount provides a mock function with given fields: ctx, tenant
func (_m *Store) DeviceRemovedCount(ctx context.Context, tenant string) (int64, error) {
	ret := _m.Called(ctx, tenant)

	if len(ret) == 0 {
		panic("no return value specified for DeviceRemovedCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, tenant)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceRemovedDelete provides a mock function with given fields: ctx, tenant, uid
func (_m *Store) DeviceRemovedDelete(ctx context.Context, tenant string, uid models.UID) error {
	ret := _m.Called(ctx, tenant, uid)

	if len(ret) == 0 {
		panic("no return value specified for DeviceRemovedDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.UID) error); ok {
		r0 = rf(ctx, tenant, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceRemovedGet provides a mock function with given fields: ctx, tenant, uid
func (_m *Store) DeviceRemovedGet(ctx context.Context, tenant string, uid models.UID) (*models.DeviceRemoved, error) {
	ret := _m.Called(ctx, tenant, uid)

	if len(ret) == 0 {
		panic("no return value specified for DeviceRemovedGet")
	}

	var r0 *models.DeviceRemoved
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.UID) (*models.DeviceRemoved, error)); ok {
		return rf(ctx, tenant, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.UID) *models.DeviceRemoved); ok {
		r0 = rf(ctx, tenant, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeviceRemoved)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.UID) error); ok {
		r1 = rf(ctx, tenant, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceRemovedInsert provides a mock function with given fields: ctx, tenant, device
func (_m *Store) DeviceRemovedInsert(ctx context.Context, tenant string, device *models.Device) error {
	ret := _m.Called(ctx, tenant, device)

	if len(ret) == 0 {
		panic("no return value specified for DeviceRemovedInsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Device) error); ok {
		r0 = rf(ctx, tenant, device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceRemovedList provides a mock function with given fields: ctx, tenant, pagination, filters, sorter
func (_m *Store) DeviceRemovedList(ctx context.Context, tenant string, pagination query.Paginator, filters query.Filters, sorter query.Sorter) ([]models.DeviceRemoved, int, error) {
	ret := _m.Called(ctx, tenant, pagination, filters, sorter)

	if len(ret) == 0 {
		panic("no return value specified for DeviceRemovedList")
	}

	var r0 []models.DeviceRemoved
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, query.Paginator, query.Filters, query.Sorter) ([]models.DeviceRemoved, int, error)); ok {
		return rf(ctx, tenant, pagination, filters, sorter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, query.Paginator, query.Filters, query.Sorter) []models.DeviceRemoved); ok {
		r0 = rf(ctx, tenant, pagination, filters, sorter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceRemoved)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, query.Paginator, query.Filters, query.Sorter) int); ok {
		r1 = rf(ctx, tenant, pagination, filters, sorter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, query.Paginator, query.Filters, query.Sorter) error); ok {
		r2 = rf(ctx, tenant, pagination, filters, sorter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeviceRename provides a mock function with given fields: ctx, uid, hostname
func (_m *Store) DeviceRename(ctx context.Context, uid models.UID, hostname string) error {
	ret := _m.Called(ctx, uid, hostname)

	if len(ret) == 0 {
		panic("no return value specified for DeviceRename")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, string) error); ok {
		r0 = rf(ctx, uid, hostname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSetOffline provides a mock function with given fields: ctx, uid
func (_m *Store) DeviceSetOffline(ctx context.Context, uid string) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for DeviceSetOffline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSetOnline provides a mock function with given fields: ctx, connectedDevices
func (_m *Store) DeviceSetOnline(ctx context.Context, connectedDevices []models.ConnectedDevice) error {
	ret := _m.Called(ctx, connectedDevices)

	if len(ret) == 0 {
		panic("no return value specified for DeviceSetOnline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.ConnectedDevice) error); ok {
		r0 = rf(ctx, connectedDevices)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSetPosition provides a mock function with given fields: ctx, uid, position
func (_m *Store) DeviceSetPosition(ctx context.Context, uid models.UID, position models.DevicePosition) error {
	ret := _m.Called(ctx, uid, position)

	if len(ret) == 0 {
		panic("no return value specified for DeviceSetPosition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, models.DevicePosition) error); ok {
		r0 = rf(ctx, uid, position)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSetTags provides a mock function with given fields: ctx, uid, tags
func (_m *Store) DeviceSetTags(ctx context.Context, uid models.UID, tags []string) (int64, int64, error) {
	ret := _m.Called(ctx, uid, tags)

	if len(ret) == 0 {
		panic("no return value specified for DeviceSetTags")
	}

	var r0 int64
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, []string) (int64, int64, error)); ok {
		return rf(ctx, uid, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, []string) int64); ok {
		r0 = rf(ctx, uid, tags)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UID, []string) int64); ok {
		r1 = rf(ctx, uid, tags)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.UID, []string) error); ok {
		r2 = rf(ctx, uid, tags)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeviceUpdate provides a mock function with given fields: ctx, tenant, uid, changes
func (_m *Store) DeviceUpdate(ctx context.Context, tenant string, uid string, changes *models.DeviceChanges) error {
	ret := _m.Called(ctx, tenant, uid, changes)

	if len(ret) == 0 {
		panic("no return value specified for DeviceUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *models.DeviceChanges) error); ok {
		r0 = rf(ctx, tenant, uid, changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceUpdateStatus provides a mock function with given fields: ctx, uid, status
func (_m *Store) DeviceUpdateStatus(ctx context.Context, uid models.UID, status models.DeviceStatus) error {
	ret := _m.Called(ctx, uid, status)

	if len(ret) == 0 {
		panic("no return value specified for DeviceUpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, models.DeviceStatus) error); ok {
		r0 = rf(ctx, uid, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStats provides a mock function with given fields: ctx
func (_m *Store) GetStats(ctx context.Context) (*models.Stats, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *models.Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.Stats, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.Stats); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Stats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceAddMember provides a mock function with given fields: ctx, tenantID, member
func (_m *Store) NamespaceAddMember(ctx context.Context, tenantID string, member *models.Member) error {
	ret := _m.Called(ctx, tenantID, member)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceAddMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Member) error); ok {
		r0 = rf(ctx, tenantID, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamespaceCreate provides a mock function with given fields: ctx, namespace
func (_m *Store) NamespaceCreate(ctx context.Context, namespace *models.Namespace) (*models.Namespace, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceCreate")
	}

	var r0 *models.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Namespace) (*models.Namespace, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Namespace) *models.Namespace); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Namespace) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceDelete provides a mock function with given fields: ctx, tenantID
func (_m *Store) NamespaceDelete(ctx context.Context, tenantID string) error {
	ret := _m.Called(ctx, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamespaceEdit provides a mock function with given fields: ctx, tenant, changes
func (_m *Store) NamespaceEdit(ctx context.Context, tenant string, changes *models.NamespaceChanges) error {
	ret := _m.Called(ctx, tenant, changes)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceEdit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NamespaceChanges) error); ok {
		r0 = rf(ctx, tenant, changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamespaceGet provides a mock function with given fields: ctx, tenantID, opts
func (_m *Store) NamespaceGet(ctx context.Context, tenantID string, opts ...store.NamespaceQueryOption) (*models.Namespace, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tenantID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceGet")
	}

	var r0 *models.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...store.NamespaceQueryOption) (*models.Namespace, error)); ok {
		return rf(ctx, tenantID, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...store.NamespaceQueryOption) *models.Namespace); ok {
		r0 = rf(ctx, tenantID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...store.NamespaceQueryOption) error); ok {
		r1 = rf(ctx, tenantID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceGetByName provides a mock function with given fields: ctx, name, opts
func (_m *Store) NamespaceGetByName(ctx context.Context, name string, opts ...store.NamespaceQueryOption) (*models.Namespace, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceGetByName")
	}

	var r0 *models.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...store.NamespaceQueryOption) (*models.Namespace, error)); ok {
		return rf(ctx, name, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...store.NamespaceQueryOption) *models.Namespace); ok {
		r0 = rf(ctx, name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...store.NamespaceQueryOption) error); ok {
		r1 = rf(ctx, name, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceGetPreferred provides a mock function with given fields: ctx, userID, opts
func (_m *Store) NamespaceGetPreferred(ctx context.Context, userID string, opts ...store.NamespaceQueryOption) (*models.Namespace, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceGetPreferred")
	}

	var r0 *models.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...store.NamespaceQueryOption) (*models.Namespace, error)); ok {
		return rf(ctx, userID, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...store.NamespaceQueryOption) *models.Namespace); ok {
		r0 = rf(ctx, userID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...store.NamespaceQueryOption) error); ok {
		r1 = rf(ctx, userID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceGetSessionRecord provides a mock function with given fields: ctx, tenantID
func (_m *Store) NamespaceGetSessionRecord(ctx context.Context, tenantID string) (bool, error) {
	ret := _m.Called(ctx, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceGetSessionRecord")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, tenantID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceList provides a mock function with given fields: ctx, paginator, filters, opts
func (_m *Store) NamespaceList(ctx context.Context, paginator query.Paginator, filters query.Filters, opts ...store.NamespaceQueryOption) ([]models.Namespace, int, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, paginator, filters)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceList")
	}

	var r0 []models.Namespace
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator, query.Filters, ...store.NamespaceQueryOption) ([]models.Namespace, int, error)); ok {
		return rf(ctx, paginator, filters, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator, query.Filters, ...store.NamespaceQueryOption) []models.Namespace); ok {
		r0 = rf(ctx, paginator, filters, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Paginator, query.Filters, ...store.NamespaceQueryOption) int); ok {
		r1 = rf(ctx, paginator, filters, opts...)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, query.Paginator, query.Filters, ...store.NamespaceQueryOption) error); ok {
		r2 = rf(ctx, paginator, filters, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NamespaceRemoveMember provides a mock function with given fields: ctx, tenantID, memberID
func (_m *Store) NamespaceRemoveMember(ctx context.Context, tenantID string, memberID string) error {
	ret := _m.Called(ctx, tenantID, memberID)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceRemoveMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tenantID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamespaceSetSessionRecord provides a mock function with given fields: ctx, sessionRecord, tenantID
func (_m *Store) NamespaceSetSessionRecord(ctx context.Context, sessionRecord bool, tenantID string) error {
	ret := _m.Called(ctx, sessionRecord, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceSetSessionRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, string) error); ok {
		r0 = rf(ctx, sessionRecord, tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamespaceUpdate provides a mock function with given fields: ctx, tenantID, namespace
func (_m *Store) NamespaceUpdate(ctx context.Context, tenantID string, namespace *models.Namespace) error {
	ret := _m.Called(ctx, tenantID, namespace)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Namespace) error); ok {
		r0 = rf(ctx, tenantID, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamespaceUpdateMember provides a mock function with given fields: ctx, tenantID, memberID, changes
func (_m *Store) NamespaceUpdateMember(ctx context.Context, tenantID string, memberID string, changes *models.MemberChanges) error {
	ret := _m.Called(ctx, tenantID, memberID, changes)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceUpdateMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *models.MemberChanges) error); ok {
		r0 = rf(ctx, tenantID, memberID, changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Options provides a mock function with no fields
func (_m *Store) Options() store.QueryOptions {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 store.QueryOptions
	if rf, ok := ret.Get(0).(func() store.QueryOptions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.QueryOptions)
		}
	}

	return r0
}

// PrivateKeyCreate provides a mock function with given fields: ctx, key
func (_m *Store) PrivateKeyCreate(ctx context.Context, key *models.PrivateKey) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for PrivateKeyCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PrivateKey) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrivateKeyGet provides a mock function with given fields: ctx, fingerprint
func (_m *Store) PrivateKeyGet(ctx context.Context, fingerprint string) (*models.PrivateKey, error) {
	ret := _m.Called(ctx, fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for PrivateKeyGet")
	}

	var r0 *models.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.PrivateKey, error)); ok {
		return rf(ctx, fingerprint)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.PrivateKey); ok {
		r0 = rf(ctx, fingerprint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fingerprint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublicKeyBulkDeleteTag provides a mock function with given fields: ctx, tenant, tag
func (_m *Store) PublicKeyBulkDeleteTag(ctx context.Context, tenant string, tag string) (int64, error) {
	ret := _m.Called(ctx, tenant, tag)

	if len(ret) == 0 {
		panic("no return value specified for PublicKeyBulkDeleteTag")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int64, error)); ok {
		return rf(ctx, tenant, tag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, tenant, tag)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenant, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublicKeyBulkRenameTag provides a mock function with given fields: ctx, tenant, currentTag, newTag
func (_m *Store) PublicKeyBulkRenameTag(ctx context.Context, tenant string, currentTag string, newTag string) (int64, error) {
	ret := _m.Called(ctx, tenant, currentTag, newTag)

	if len(ret) == 0 {
		panic("no return value specified for PublicKeyBulkRenameTag")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (int64, error)); ok {
		return rf(ctx, tenant, currentTag, newTag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, tenant, currentTag, newTag)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenant, currentTag, newTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublicKeyCreate provides a mock function with given fields: ctx, key
func (_m *Store) PublicKeyCreate(ctx context.Context, key *models.PublicKey) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for PublicKeyCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PublicKey) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublicKeyDelete provides a mock function with given fields: ctx, fingerprint, tenantID
func (_m *Store) PublicKeyDelete(ctx context.Context, fingerprint string, tenantID string) error {
	ret := _m.Called(ctx, fingerprint, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for PublicKeyDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, fingerprint, tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublicKeyGet provides a mock function with given fields: ctx, fingerprint, tenantID
func (_m *Store) PublicKeyGet(ctx context.Context, fingerprint string, tenantID string) (*models.PublicKey, error) {
	ret := _m.Called(ctx, fingerprint, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for PublicKeyGet")
	}

	var r0 *models.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.PublicKey, error)); ok {
		return rf(ctx, fingerprint, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.PublicKey); ok {
		r0 = rf(ctx, fingerprint, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, fingerprint, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublicKeyGetTags provides a mock function with given fields: ctx, tenant
func (_m *Store) PublicKeyGetTags(ctx context.Context, tenant string) ([]string, int, error) {
	ret := _m.Called(ctx, tenant)

	if len(ret) == 0 {
		panic("no return value specified for PublicKeyGetTags")
	}

	var r0 []string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, int, error)); ok {
		return rf(ctx, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, tenant)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, tenant)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PublicKeyList provides a mock function with given fields: ctx, paginator
func (_m *Store) PublicKeyList(ctx context.Context, paginator query.Paginator) ([]models.PublicKey, int, error) {
	ret := _m.Called(ctx, paginator)

	if len(ret) == 0 {
		panic("no return value specified for PublicKeyList")
	}

	var r0 []models.PublicKey
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator) ([]models.PublicKey, int, error)); ok {
		return rf(ctx, paginator)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator) []models.PublicKey); ok {
		r0 = rf(ctx, paginator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Paginator) int); ok {
		r1 = rf(ctx, paginator)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, query.Paginator) error); ok {
		r2 = rf(ctx, paginator)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PublicKeyPullTag provides a mock function with given fields: ctx, tenant, fingerprint, tag
func (_m *Store) PublicKeyPullTag(ctx context.Context, tenant string, fingerprint string, tag string) error {
	ret := _m.Called(ctx, tenant, fingerprint, tag)

	if len(ret) == 0 {
		panic("no return value specified for PublicKeyPullTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, tenant, fingerprint, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublicKeyPushTag provides a mock function with given fields: ctx, tenant, fingerprint, tag
func (_m *Store) PublicKeyPushTag(ctx context.Context, tenant string, fingerprint string, tag string) error {
	ret := _m.Called(ctx, tenant, fingerprint, tag)

	if len(ret) == 0 {
		panic("no return value specified for PublicKeyPushTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, tenant, fingerprint, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublicKeySetTags provides a mock function with given fields: ctx, tenant, fingerprint, tags
func (_m *Store) PublicKeySetTags(ctx context.Context, tenant string, fingerprint string, tags []string) (int64, int64, error) {
	ret := _m.Called(ctx, tenant, fingerprint, tags)

	if len(ret) == 0 {
		panic("no return value specified for PublicKeySetTags")
	}

	var r0 int64
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (int64, int64, error)); ok {
		return rf(ctx, tenant, fingerprint, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) int64); ok {
		r0 = rf(ctx, tenant, fingerprint, tags)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) int64); ok {
		r1 = rf(ctx, tenant, fingerprint, tags)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, []string) error); ok {
		r2 = rf(ctx, tenant, fingerprint, tags)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PublicKeyUpdate provides a mock function with given fields: ctx, fingerprint, tenantID, key
func (_m *Store) PublicKeyUpdate(ctx context.Context, fingerprint string, tenantID string, key *models.PublicKeyUpdate) (*models.PublicKey, error) {
	ret := _m.Called(ctx, fingerprint, tenantID, key)

	if len(ret) == 0 {
		panic("no return value specified for PublicKeyUpdate")
	}

	var r0 *models.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *models.PublicKeyUpdate) (*models.PublicKey, error)); ok {
		return rf(ctx, fingerprint, tenantID, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *models.PublicKeyUpdate) *models.PublicKey); ok {
		r0 = rf(ctx, fingerprint, tenantID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *models.PublicKeyUpdate) error); ok {
		r1 = rf(ctx, fingerprint, tenantID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionActiveCreate provides a mock function with given fields: ctx, uid, session
func (_m *Store) SessionActiveCreate(ctx context.Context, uid models.UID, session *models.Session) error {
	ret := _m.Called(ctx, uid, session)

	if len(ret) == 0 {
		panic("no return value specified for SessionActiveCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, *models.Session) error); ok {
		r0 = rf(ctx, uid, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionCreate provides a mock function with given fields: ctx, session
func (_m *Store) SessionCreate(ctx context.Context, session models.Session) (*models.Session, error) {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for SessionCreate")
	}

	var r0 *models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Session) (*models.Session, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Session) *models.Session); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionDeleteActives provides a mock function with given fields: ctx, uid
func (_m *Store) SessionDeleteActives(ctx context.Context, uid models.UID) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for SessionDeleteActives")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionEvent provides a mock function with given fields: ctx, uid, event
func (_m *Store) SessionEvent(ctx context.Context, uid models.UID, event *models.SessionEvent) error {
	ret := _m.Called(ctx, uid, event)

	if len(ret) == 0 {
		panic("no return value specified for SessionEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, *models.SessionEvent) error); ok {
		r0 = rf(ctx, uid, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionGet provides a mock function with given fields: ctx, uid
func (_m *Store) SessionGet(ctx context.Context, uid models.UID) (*models.Session, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for SessionGet")
	}

	var r0 *models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) (*models.Session, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) *models.Session); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UID) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionList provides a mock function with given fields: ctx, paginator
func (_m *Store) SessionList(ctx context.Context, paginator query.Paginator) ([]models.Session, int, error) {
	ret := _m.Called(ctx, paginator)

	if len(ret) == 0 {
		panic("no return value specified for SessionList")
	}

	var r0 []models.Session
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator) ([]models.Session, int, error)); ok {
		return rf(ctx, paginator)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator) []models.Session); ok {
		r0 = rf(ctx, paginator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Paginator) int); ok {
		r1 = rf(ctx, paginator)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, query.Paginator) error); ok {
		r2 = rf(ctx, paginator)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SessionSetLastSeen provides a mock function with given fields: ctx, uid
func (_m *Store) SessionSetLastSeen(ctx context.Context, uid models.UID) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for SessionSetLastSeen")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionSetRecorded provides a mock function with given fields: ctx, uid, recorded
func (_m *Store) SessionSetRecorded(ctx context.Context, uid models.UID, recorded bool) error {
	ret := _m.Called(ctx, uid, recorded)

	if len(ret) == 0 {
		panic("no return value specified for SessionSetRecorded")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, bool) error); ok {
		r0 = rf(ctx, uid, recorded)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionUpdate provides a mock function with given fields: ctx, uid, model
func (_m *Store) SessionUpdate(ctx context.Context, uid models.UID, model *models.Session) error {
	ret := _m.Called(ctx, uid, model)

	if len(ret) == 0 {
		panic("no return value specified for SessionUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, *models.Session) error); ok {
		r0 = rf(ctx, uid, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionUpdateDeviceUID provides a mock function with given fields: ctx, oldUID, newUID
func (_m *Store) SessionUpdateDeviceUID(ctx context.Context, oldUID models.UID, newUID models.UID) error {
	ret := _m.Called(ctx, oldUID, newUID)

	if len(ret) == 0 {
		panic("no return value specified for SessionUpdateDeviceUID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, models.UID) error); ok {
		r0 = rf(ctx, oldUID, newUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SystemGet provides a mock function with given fields: ctx
func (_m *Store) SystemGet(ctx context.Context) (*models.System, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SystemGet")
	}

	var r0 *models.System
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.System, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.System); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.System)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemSet provides a mock function with given fields: ctx, key, value
func (_m *Store) SystemSet(ctx context.Context, key string, value interface{}) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for SystemSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TagsDelete provides a mock function with given fields: ctx, tenant, tag
func (_m *Store) TagsDelete(ctx context.Context, tenant string, tag string) (int64, error) {
	ret := _m.Called(ctx, tenant, tag)

	if len(ret) == 0 {
		panic("no return value specified for TagsDelete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int64, error)); ok {
		return rf(ctx, tenant, tag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, tenant, tag)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenant, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagsGet provides a mock function with given fields: ctx, tenant
func (_m *Store) TagsGet(ctx context.Context, tenant string) ([]string, int, error) {
	ret := _m.Called(ctx, tenant)

	if len(ret) == 0 {
		panic("no return value specified for TagsGet")
	}

	var r0 []string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, int, error)); ok {
		return rf(ctx, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, tenant)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, tenant)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TagsRename provides a mock function with given fields: ctx, tenant, oldTag, newTag
func (_m *Store) TagsRename(ctx context.Context, tenant string, oldTag string, newTag string) (int64, error) {
	ret := _m.Called(ctx, tenant, oldTag, newTag)

	if len(ret) == 0 {
		panic("no return value specified for TagsRename")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (int64, error)); ok {
		return rf(ctx, tenant, oldTag, newTag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, tenant, oldTag, newTag)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenant, oldTag, newTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserConflicts provides a mock function with given fields: ctx, target
func (_m *Store) UserConflicts(ctx context.Context, target *models.UserConflicts) ([]string, bool, error) {
	ret := _m.Called(ctx, target)

	if len(ret) == 0 {
		panic("no return value specified for UserConflicts")
	}

	var r0 []string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserConflicts) ([]string, bool, error)); ok {
		return rf(ctx, target)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserConflicts) []string); ok {
		r0 = rf(ctx, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UserConflicts) bool); ok {
		r1 = rf(ctx, target)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *models.UserConflicts) error); ok {
		r2 = rf(ctx, target)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserCreate provides a mock function with given fields: ctx, user
func (_m *Store) UserCreate(ctx context.Context, user *models.User) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UserCreate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCreateInvited provides a mock function with given fields: ctx, email
func (_m *Store) UserCreateInvited(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UserCreateInvited")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDelete provides a mock function with given fields: ctx, id
func (_m *Store) UserDelete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UserDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserGetByEmail provides a mock function with given fields: ctx, email
func (_m *Store) UserGetByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UserGetByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGetByID provides a mock function with given fields: ctx, id, ns
func (_m *Store) UserGetByID(ctx context.Context, id string, ns bool) (*models.User, int, error) {
	ret := _m.Called(ctx, id, ns)

	if len(ret) == 0 {
		panic("no return value specified for UserGetByID")
	}

	var r0 *models.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (*models.User, int, error)); ok {
		return rf(ctx, id, ns)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *models.User); ok {
		r0 = rf(ctx, id, ns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) int); ok {
		r1 = rf(ctx, id, ns)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, bool) error); ok {
		r2 = rf(ctx, id, ns)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserGetByUsername provides a mock function with given fields: ctx, username
func (_m *Store) UserGetByUsername(ctx context.Context, username string) (*models.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for UserGetByUsername")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGetInfo provides a mock function with given fields: ctx, id
func (_m *Store) UserGetInfo(ctx context.Context, id string) (*models.UserInfo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UserGetInfo")
	}

	var r0 *models.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserInfo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserInfo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserList provides a mock function with given fields: ctx, paginator, filters
func (_m *Store) UserList(ctx context.Context, paginator query.Paginator, filters query.Filters) ([]models.User, int, error) {
	ret := _m.Called(ctx, paginator, filters)

	if len(ret) == 0 {
		panic("no return value specified for UserList")
	}

	var r0 []models.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator, query.Filters) ([]models.User, int, error)); ok {
		return rf(ctx, paginator, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator, query.Filters) []models.User); ok {
		r0 = rf(ctx, paginator, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Paginator, query.Filters) int); ok {
		r1 = rf(ctx, paginator, filters)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, query.Paginator, query.Filters) error); ok {
		r2 = rf(ctx, paginator, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserUpdate provides a mock function with given fields: ctx, id, changes
func (_m *Store) UserUpdate(ctx context.Context, id string, changes *models.UserChanges) error {
	ret := _m.Called(ctx, id, changes)

	if len(ret) == 0 {
		panic("no return value specified for UserUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.UserChanges) error); ok {
		r0 = rf(ctx, id, changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTransaction provides a mock function with given fields: ctx, cb
func (_m *Store) WithTransaction(ctx context.Context, cb store.TransactionCb) error {
	ret := _m.Called(ctx, cb)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, store.TransactionCb) error); ok {
		r0 = rf(ctx, cb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
