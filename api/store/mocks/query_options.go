// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	models "github.com/shellhub-io/shellhub/pkg/models"
	mock "github.com/stretchr/testify/mock"

	query "github.com/shellhub-io/shellhub/pkg/api/query"

	store "github.com/shellhub-io/shellhub/api/store"
)

// QueryOptions is an autogenerated mock type for the QueryOptions type
type QueryOptions struct {
	mock.Mock
}

// InNamespace provides a mock function with given fields: tenantID
func (_m *QueryOptions) InNamespace(tenantID string) store.QueryOption {
	ret := _m.Called(tenantID)

	if len(ret) == 0 {
		panic("no return value specified for InNamespace")
	}

	var r0 store.QueryOption
	if rf, ok := ret.Get(0).(func(string) store.QueryOption); ok {
		r0 = rf(tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.QueryOption)
		}
	}

	return r0
}

// Match provides a mock function with given fields: fs
func (_m *QueryOptions) Match(fs *query.Filters) store.QueryOption {
	ret := _m.Called(fs)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 store.QueryOption
	if rf, ok := ret.Get(0).(func(*query.Filters) store.QueryOption); ok {
		r0 = rf(fs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.QueryOption)
		}
	}

	return r0
}

// Paginate provides a mock function with given fields: paginator
func (_m *QueryOptions) Paginate(paginator *query.Paginator) store.QueryOption {
	ret := _m.Called(paginator)

	if len(ret) == 0 {
		panic("no return value specified for Paginate")
	}

	var r0 store.QueryOption
	if rf, ok := ret.Get(0).(func(*query.Paginator) store.QueryOption); ok {
		r0 = rf(paginator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.QueryOption)
		}
	}

	return r0
}

// Sort provides a mock function with given fields: sorter
func (_m *QueryOptions) Sort(sorter *query.Sorter) store.QueryOption {
	ret := _m.Called(sorter)

	if len(ret) == 0 {
		panic("no return value specified for Sort")
	}

	var r0 store.QueryOption
	if rf, ok := ret.Get(0).(func(*query.Sorter) store.QueryOption); ok {
		r0 = rf(sorter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.QueryOption)
		}
	}

	return r0
}

// WithDeviceStatus provides a mock function with given fields: _a0
func (_m *QueryOptions) WithDeviceStatus(_a0 models.DeviceStatus) store.QueryOption {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithDeviceStatus")
	}

	var r0 store.QueryOption
	if rf, ok := ret.Get(0).(func(models.DeviceStatus) store.QueryOption); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.QueryOption)
		}
	}

	return r0
}

// NewQueryOptions creates a new instance of QueryOptions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryOptions(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryOptions {
	mock := &QueryOptions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
