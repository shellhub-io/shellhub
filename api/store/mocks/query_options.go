// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	models "github.com/shellhub-io/shellhub/pkg/models"
	mock "github.com/stretchr/testify/mock"

	store "github.com/shellhub-io/shellhub/api/store"
)

// QueryOptions is an autogenerated mock type for the QueryOptions type
type QueryOptions struct {
	mock.Mock
}

// CountAcceptedDevices provides a mock function with no fields
func (_m *QueryOptions) CountAcceptedDevices() store.NamespaceQueryOption {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountAcceptedDevices")
	}

	var r0 store.NamespaceQueryOption
	if rf, ok := ret.Get(0).(func() store.NamespaceQueryOption); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.NamespaceQueryOption)
		}
	}

	return r0
}

// EnrichMembersData provides a mock function with no fields
func (_m *QueryOptions) EnrichMembersData() store.NamespaceQueryOption {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnrichMembersData")
	}

	var r0 store.NamespaceQueryOption
	if rf, ok := ret.Get(0).(func() store.NamespaceQueryOption); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.NamespaceQueryOption)
		}
	}

	return r0
}

// WithDeviceStatus provides a mock function with given fields: _a0
func (_m *QueryOptions) WithDeviceStatus(_a0 models.DeviceStatus) store.QueryOption {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithDeviceStatus")
	}

	var r0 store.QueryOption
	if rf, ok := ret.Get(0).(func(models.DeviceStatus) store.QueryOption); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.QueryOption)
		}
	}

	return r0
}

// NewQueryOptions creates a new instance of QueryOptions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryOptions(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryOptions {
	mock := &QueryOptions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
