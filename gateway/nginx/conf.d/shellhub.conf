{{ $cfg := .Config }}

lua_shared_dict dns_cache 128k;

server {
    {{ if and ($cfg.EnableAutoSSL) (ne $cfg.Env "development") -}}
    listen 443 reuseport ssl{{ if $cfg.EnableProxyProtocol }} proxy_protocol{{ end }} backlog={{ $cfg.BacklogSize }};
    ssl_certificate /etc/letsencrypt/live/{{ $cfg.Domain }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ $cfg.Domain }}/privkey.pem;

    ssl_session_cache shared:le_nginx_SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    ssl_dhparam /etc/shellhub-gateway/dhparam.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
    {{ else -}}
    listen 80 reuseport{{ if $cfg.EnableProxyProtocol }} proxy_protocol{{ end }} backlog={{ $cfg.BacklogSize }};
    {{- end }}
    {{ if $cfg.EnableProxyProtocol }}
    set_real_ip_from ::/0;
    real_ip_header proxy_protocol;
    {{ end }}
    server_name {{ $cfg.Domain }};
    server_tokens off;
    resolver 127.0.0.11 ipv6=off;

    {{ if and (not $cfg.EnableCloud) (not $cfg.EnableEnterprise) }}

    location = /api/setup {
        set $upstream api:8080;

        proxy_http_version 1.1;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://$upstream;
    }

    {{ end }}

    location /healthcheck {
        return 200;
    }

    location / {
        set $upstream ui:8080;

        add_header Cache-Control "no-cache, no-store";
        add_header Pragma "no-cache";

        proxy_pass http://$upstream;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /etc/letsencrypt;
    }

    location /api {
        set $upstream api:8080;

        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        auth_request_set $id $upstream_http_x_id;
        auth_request_set $api_key $upstream_http_x_api_key;
        auth_request_set $role $upstream_http_x_role;
        error_page 500 =401 /auth;
        proxy_http_version 1.1;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $x_forwarded_port;
        proxy_set_header X-Forwarded-Proto $x_forwarded_proto;
        proxy_set_header X-Api-Key $api_key;
        proxy_set_header X-ID $id;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header X-Role $role;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_pass http://$upstream;
    }

    location /api/user {
        set $upstream api:8080;

        {{/*
            The route for deleting users is available only in cloud instances.
            Community users must use the CLI, while enterprise users have access
            to the admin dashboard.
        */}}
        if ($request_method = DELETE) {
            set $upstream cloud:8080;
        }

        auth_request       /auth;
        auth_request_set   $tenant_id $upstream_http_x_tenant_id;
        auth_request_set   $username $upstream_http_x_username;
        auth_request_set   $id $upstream_http_x_id;
        auth_request_set   $api_key $upstream_http_x_api_key;
        auth_request_set   $role $upstream_http_x_role;
        error_page         500 =401 /auth;
        proxy_http_version 1.1;
        proxy_set_header   Connection $connection_upgrade;
        proxy_set_header   X-Api-Key $api_key;
        proxy_set_header   X-ID $id;
        proxy_set_header   X-Request-ID $request_id;
        proxy_set_header   X-Role $role;
        proxy_set_header   X-Tenant-ID $tenant_id;
        proxy_set_header   X-Username $username;
        proxy_pass         http://$upstream;
    }

    location ~^/api/namespaces/[^/]+/members/accept-invite$ {
        set $upstream cloud:8080;

        auth_request       /auth;
        auth_request_set   $tenant_id $upstream_http_x_tenant_id;
        auth_request_set   $username $upstream_http_x_username;
        auth_request_set   $id $upstream_http_x_id;
        auth_request_set   $api_key $upstream_http_x_api_key;
        auth_request_set   $role $upstream_http_x_role;
        error_page         500 =401 /auth;
        proxy_http_version 1.1;
        proxy_set_header   Connection $connection_upgrade;
        proxy_set_header   X-Forwarded-Host $host;
        proxy_set_header   X-Forwarded-Port $x_forwarded_port;
        proxy_set_header   X-Forwarded-Proto $x_forwarded_proto;
        proxy_set_header   X-Api-Key $api_key;
        proxy_set_header   X-ID $id;
        proxy_set_header   X-Request-ID $request_id;
        proxy_set_header   X-Role $role;
        proxy_set_header   X-Tenant-ID $tenant_id;
        proxy_set_header   X-Username $username;
        proxy_pass         http://$upstream;
    }

    location ~^/api/namespaces/[^/]+/members/[^/]+/accept-invite$ {
        set $upstream cloud:8080;

        auth_request off;

        proxy_http_version 1.1;
        proxy_set_header   Connection $connection_upgrade;
        proxy_set_header   X-Forwarded-Host $host;
        proxy_set_header   X-Forwarded-Port $x_forwarded_port;
        proxy_set_header   X-Forwarded-Proto $x_forwarded_proto;
        proxy_set_header   X-Request-ID $request_id;

        proxy_pass         http://$upstream;
    }

    {{ if $cfg.EnableEnterprise -}}
    location ~^/api/namespaces/[^/]+/members/invites$ {
        set $upstream cloud:8080;

        auth_request       /auth;
        auth_request_set   $tenant_id $upstream_http_x_tenant_id;
        auth_request_set   $username $upstream_http_x_username;
        auth_request_set   $id $upstream_http_x_id;
        auth_request_set   $api_key $upstream_http_x_api_key;
        auth_request_set   $role $upstream_http_x_role;
        error_page         500 =401 /auth;
        proxy_http_version 1.1;
        proxy_set_header   Connection $connection_upgrade;
        proxy_set_header   X-Forwarded-Host $host;
        proxy_set_header   X-Forwarded-Port $x_forwarded_port;
        proxy_set_header   X-Forwarded-Proto $x_forwarded_proto;
        proxy_set_header   X-Api-Key $api_key;
        proxy_set_header   X-ID $id;
        proxy_set_header   X-Request-ID $request_id;
        proxy_set_header   X-Role $role;
        proxy_set_header   X-Tenant-ID $tenant_id;
        proxy_set_header   X-Username $username;
        proxy_pass         http://$upstream;
    }
    {{ end -}}

    {{ if $cfg.EnableEnterprise -}}
    location ~ ^/api/namespaces/([^/]+)/support$ {
        set $upstream cloud:8080;

        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        auth_request_set $id $upstream_http_x_id;
        auth_request_set $role $upstream_http_x_role;
        error_page 500 =401 /auth;
        proxy_http_version 1.1;
        proxy_set_header X-ID $id;
        proxy_set_header X-Role $role;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if $cfg.EnableEnterprise -}}
    location ~ ^/api/devices/([^/]+)/tunnels(/.*)?$  {
        set $upstream cloud:8080;

        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        auth_request_set $id $upstream_http_x_id;
        auth_request_set $role $upstream_http_x_role;
        error_page 500 =401 /auth;
        proxy_http_version 1.1;
        proxy_set_header X-ID $id;
        proxy_set_header X-Role $role;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    location ~ ^/(install.sh|kickstart.sh)$ {
        set $upstream api:8080;

        rewrite ^/(.*)$ /api/install break;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $x_forwarded_port;
        proxy_set_header X-Forwarded-Proto $x_forwarded_proto;
        proxy_pass http://$upstream;
    }

    location /api/auth/user {
        set $upstream api:8080;

        auth_request /auth/skip;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        auth_request_set $id $upstream_http_x_id;
        auth_request_set $role $upstream_http_x_role;
        error_page 500 =401 /auth;
        proxy_set_header X-ID $id;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header X-Role $role;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_pass http://$upstream;
    }

    {{ if eq $cfg.Env "development" -}}
    location /openapi/preview {
        set $upstream openapi:8080;

        rewrite ^/openapi/preview/?(.*)$ /$1 break;
        proxy_pass http://$upstream;
    }

    location /openapi/mock {
        set $upstream openapi:8080;

        rewrite ^/openapi/mock/?(.*)$ /$1 break;
        proxy_pass http://$upstream;
    }

    location /openapi/proxy {
        set $upstream openapi:8080;

        rewrite ^/openapi/proxy/?(.*)$ /$1 break;
        proxy_pass http://$upstream;
    }
    {{- end }}

    location ~ ^/admin$ {
        rewrite ^/admin/?$ /admin/ permanent;
    }

    {{ if $cfg.EnableEnterprise -}}
    location /admin/api {
        set $upstream cloud:8080;

        error_page 500 =401;
        rewrite ^/admin/(.*)$ /admin/$1 break;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    location /ssh/connection {
        set $upstream ssh:8080;

        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $device_uid $upstream_http_x_device_uid;
        proxy_pass http://$upstream;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        {{ if $cfg.EnableProxyProtocol -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_set_header X-Device-UID $device_uid;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Request-ID $request_id;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /ssh/revdial {
        set $upstream ssh:8080;

        proxy_pass http://$upstream;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        {{ if $cfg.EnableProxyProtocol -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_set_header X-Request-ID $request_id;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /ssh/auth {
        set $upstream api:8080;

        auth_request /auth;
        auth_request_set $device_uid $upstream_http_x_device_uid;
        error_page 500 =401 /auth;
        proxy_http_version 1.1;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://$upstream;
        proxy_set_header X-Device-UID $device_uid;
        proxy_set_header X-Request-ID $request_id;
    }

    {{ if $cfg.EnableCloud -}}
    location /api/announcements {
        set $upstream cloud:8080;

        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if $cfg.EnableCloud -}}
    location /api/billing {
        set $upstream cloud:8080;

        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        auth_request_set $id $upstream_http_x_id;
        auth_request_set $role $upstream_http_x_role;
        error_page 500 =401 /auth;
        proxy_http_version 1.1;
        proxy_set_header X-ID $id;
        proxy_set_header X-Role $role;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if $cfg.EnableCloud -}}
    location /api/connector {
        set $upstream cloud:8080;

        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        auth_request_set $id $upstream_http_x_id;
        auth_request_set $role $upstream_http_x_role;
        error_page 500 =401 /auth;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_set_header X-ID $id;
        proxy_set_header X-Role $role;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if $cfg.EnableEnterprise -}}
    location /api/firewall {
        set $upstream cloud:8080;

        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        auth_request_set $id $upstream_http_x_id;
        auth_request_set $role $upstream_http_x_role;
        error_page 500 =401 /auth;
        proxy_http_version 1.1;
        proxy_set_header X-ID $id;
        proxy_set_header X-Role $role;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if $cfg.EnableEnterprise -}}
    location /api/user/saml/auth {
        set $upstream cloud:8080;

        auth_request     off;
        proxy_set_header X-Real-IP         $x_real_ip;
        proxy_set_header X-Forwarded-Proto $x_forwarded_proto;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_pass       http://$upstream;
    }

    location /api/user/mfa {
        set $upstream cloud:8080;

        auth_request     /auth;
        auth_request_set $id $upstream_http_x_id;
        error_page       500 =401 /auth;
        proxy_set_header X-Real-IP $x_real_ip;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-ID $id;
        proxy_pass       http://$upstream;
    }

    location ~^/api/user/mfa/(auth|recover|reset)(?:/.*)?$ {
        set $upstream cloud:8080;

        auth_request     off;
        proxy_set_header X-Real-IP $x_real_ip;
        proxy_set_header X-Forwarded-Host $host;
        proxy_pass       http://$upstream;
    }

    location /api/register {
        set $upstream cloud:8080;

        proxy_set_header X-Forwarded-Host $host;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if $cfg.EnableCloud -}}
    location /api/user/recover_password {
        set $upstream cloud:8080;

        proxy_set_header X-Forwarded-Host $host;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if $cfg.EnableCloud -}}
    location ~* /api/user/(.*)/update_password {
        set $upstream cloud:8080;

        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if $cfg.EnableCloud -}}
    location /api/user/resend_email {
        set $upstream cloud:8080;

        proxy_set_header X-Forwarded-Host $host;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if $cfg.EnableCloud -}}
    location /api/user/validation_account {
        set $upstream cloud:8080;

        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if $cfg.EnableEnterprise -}}
    location ~* /api/sessions/(.*)/records/(.*) {
        set $upstream cloud:8080;

        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        auth_request_set $role $upstream_http_x_role;
        error_page 500 =401 /auth;
        proxy_http_version 1.1;
        proxy_set_header X-Role $role;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    location ~* /api/sessions/(.*)/close {
        set $upstream ssh:8080;

        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $role $upstream_http_x_role;
        error_page 500 =401 /auth;
        proxy_set_header X-Role $role;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_pass http://$upstream;
    }

    location /api/devices/auth {
        set $upstream api:8080;

        auth_request off;
        {{ if $cfg.EnableProxyProtocol -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_http_version 1.1;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://$upstream;
    }

    location /api/login {
        set $upstream api:8080;

        auth_request off;
        proxy_pass http://$upstream;
    }

    location /api/webhook-billing {
        set $upstream cloud:8080;

        auth_request off;
        proxy_pass http://$upstream;
    }

    location /auth {
        set $upstream api:8080;

        internal;
        rewrite ^/(.*)$ /internal/$1 break;
        proxy_http_version 1.1;
        proxy_pass http://$upstream;
    }

    location /auth/skip {
        set $upstream api:8080;

        internal;
        rewrite ^/auth/(.*)$ /internal/auth?args=$1 break;
        proxy_http_version 1.1;
        proxy_pass http://$upstream;
    }

    location /ws {
        set $upstream ssh:8080;

        proxy_pass http://$upstream;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        {{ if $cfg.EnableProxyProtocol -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /info {
        set $upstream api:8080;

        proxy_set_header Connection $connection_upgrade;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $x_forwarded_port;
        proxy_http_version 1.1;
        proxy_pass http://$upstream;
        rewrite ^/(.*)$ /api/info break;
    }

    location = /nginx_status {
        stub_status;
        allow 127.0.0.1;
        deny all;
    }
}

{{ if and $cfg.EnableEnterprise $cfg.Tunnels -}}
{{ $DOMAIN := or $cfg.TunnelsDomain $cfg.Domain }}
server {
    {{ if and ($cfg.EnableAutoSSL) (ne $cfg.Env "development") -}}
    listen 443;
    ssl_certificate "/etc/letsencrypt/live/*.{{ $DOMAIN }}/fullchain.pem";
    ssl_certificate_key "/etc/letsencrypt/live/*.{{ $DOMAIN }}/privkey.pem";

    ssl_session_cache shared:le_nginx_SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    ssl_dhparam /etc/shellhub-gateway/dhparam.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
    {{ else -}}
    listen 80;
    {{- end }}

    server_name "~^(?<address>[a-f0-9]{32})\.{{ $DOMAIN }}$";
    resolver 127.0.0.11 ipv6=off;

    location ~ ^/(?<path>.*) {
        set $upstream ssh:8080;

        rewrite ^/(.*)$ /http/proxy break;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header X-Address $address; 
        proxy_set_header X-Path /$path$is_args$args;

        proxy_http_version 1.1;
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_buffering off;

        proxy_pass http://$upstream;
    }
}
{{ end }}

{{ if and ($cfg.EnableAutoSSL) (ne $cfg.Env "development") }}
server {
    listen 80 default_server;

    return 308 https://$host$request_uri;
}
{{- end }}

{{/*
    This template is used to set the values of `upstream_host` and `upstream_port`
    dynamically within the request context (`ngx.ctx`). These values are then used by the upstream router
    to direct traffic to the appropriate backend server. To use this template, the `set_upstream` function
    must be called, which handles the internal invocation of this template.
*/}}
