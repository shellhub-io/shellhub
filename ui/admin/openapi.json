{
  "openapi": "3.0.3",
  "info": {
    "title": "ShellHub Enterprise",
    "description": "ShellHub Enterprise.\n\nIt documents all routes provided by ShellHub Enterprise.\n",
    "contact": {
      "email": "contato@ossystems.com.br"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost",
      "description": "ShellHub API server"
    }
  ],
  "tags": [
    {
      "name": "internal",
      "description": "Requests made internally between ShellHub containers"
    },
    {
      "name": "external",
      "description": "Requests made by the end user"
    },
    {
      "name": "cloud",
      "description": "Routes provide by Cloud API"
    },
    {
      "name": "admin",
      "description": "Routes provide by Admin API"
    },
    {
      "name": "users",
      "description": "Routes related to user resource"
    },
    {
      "name": "stats",
      "description": "Routes related to stats resource"
    },
    {
      "name": "license",
      "description": "Routes related to license resource"
    },
    {
      "name": "sessions",
      "description": "Routes related to session resource"
    },
    {
      "name": "users",
      "description": "Routes related to users resource"
    },
    {
      "name": "rules",
      "description": "Routes related to firewall rules resource"
    }
  ],
  "components": {
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "login": {
        "type": "object",
        "properties": {
          "username": {
            "description": "Username",
            "type": "string",
            "minLength": 3,
            "maxLength": 30,
            "example": "example"
          },
          "password": {
            "description": "Password",
            "type": "string",
            "minLength": 5,
            "maxLength": 30,
            "example": "example"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "jwt": {
        "description": "JWT Token",
        "type": "string",
        "pattern": "^[A-Za-z0-9-_]*\\.[A-Za-z0-9-_]*\\.[A-Za-z0-9-_]*$",
        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJleGFtcGxlIiwibmFtZSI6ImV4YW1wbGUiLCJpYXQiOjE1MTYyMzkwMjJ9.zqCt70KspnNnitZlv89hDbFZ5iGMMRUn0wFEmmlY-to"
      },
      "userUsername": {
        "description": "User's name.",
        "type": "string",
        "minLength": 3,
        "maxLength": 20,
        "example": "example"
      },
      "userID": {
        "description": "User's ID.",
        "type": "string",
        "pattern": "^[0-9a-fA-F]{24}$",
        "example": "507f1f77bcf86cd799439011"
      },
      "namespaceTenantID": {
        "description": "Namespace's tenant ID",
        "type": "string",
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
        "example": "3dd0d1f8-8246-4519-b11a-a3dd33717f65"
      },
      "namespaceMemberRole": {
        "description": "Namespace's member role",
        "type": "string",
        "enum": [
          "administrator",
          "operator",
          "observer",
          "owner"
        ]
      },
      "userEmail": {
        "description": "User's E-mail.",
        "type": "string",
        "format": "email",
        "example": "example@example.com"
      },
      "userAuth": {
        "type": "object",
        "properties": {
          "token": {
            "$ref": "#/components/schemas/jwt"
          },
          "user": {
            "$ref": "#/components/schemas/userUsername"
          },
          "name": {
            "description": "User's display name.",
            "type": "string",
            "example": "Example"
          },
          "id": {
            "$ref": "#/components/schemas/userID"
          },
          "tenant": {
            "$ref": "#/components/schemas/namespaceTenantID"
          },
          "role": {
            "$ref": "#/components/schemas/namespaceMemberRole"
          },
          "email": {
            "$ref": "#/components/schemas/userEmail"
          }
        }
      },
      "deviceInfo": {
        "description": "Device's info",
        "type": "object",
        "properties": {
          "id": {
            "description": "Device's OS name",
            "type": "string",
            "example": "example"
          },
          "pretty_name": {
            "description": "Device's OS pretty name",
            "type": "string",
            "example": "linux"
          },
          "version": {
            "description": "Device's OS version",
            "type": "string",
            "example": "latest"
          },
          "arch": {
            "description": "Device's OS arch",
            "type": "string",
            "example": "x86_64"
          },
          "platform": {
            "description": "Device's OS platform",
            "type": "string",
            "enum": [
              "docker",
              "native"
            ],
            "example": "docker"
          }
        }
      },
      "deviceIdentity": {
        "description": "Device's identity",
        "type": "object",
        "properties": {
          "mac": {
            "description": "Device's MAC",
            "type": "string",
            "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
            "example": "00:00:00:00:00:00"
          }
        }
      },
      "publicKeyData": {
        "description": "Public key's data.\n\nThe `data` field receives the public key enconded as `base64` string.\n",
        "type": "string",
        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
        "example": "c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDWWdqRkNQUWdPejBEZ0VQQUh3blEyMGYzRUlGYjd2SkNtd1YxR25uRTU2K0htaGgyY295c3o5MnZqMW9GeElxQUlKZUZxU3lQNWwzbDZjbkFUVmxhZ2MxR21OQm5vQ0NZSlpicXdOVUFiM3RMTXdiOXBaSGVWMFczWVl4OERBSVVsL2ZYaVVhQTNpQk5BcTFrczFzYjZjbVN1VmYwTVNTSjdoOXU3c2Y2RnkyVmQ0U1FqSGd3YmNvSUY1Q0kyWkZlMEx6NTNWeGQwVlZRZG5ISGNBeldRVFlTMDIxcmVXeG5QR2RRdytmWXpCRWdRMG5sTmFzQXBRc1pVUXRPZ0t4TlNFcVJ0VnJiRUR4WisrTllQaWFuNUdSZ0huZWNUUzBaVGNjZjM4SDZYTms1Qm5XWGlEN2RCWlJBRnZ1UjBkWEF1cU9mYUM3SVl5MVJnS1lkdEsrUnY="
      },
      "publickKeyFingerprint": {
        "description": "Public key's fingerprint.",
        "type": "string",
        "pattern": "^([0-9a-f]{2}:){15}[0-9a-f]{2}$",
        "example": "48:6e:fc:94:01:01:74:57:eb:57:49:91:15:e4:9c:7a"
      },
      "tag": {
        "description": "Tag's name",
        "type": "string",
        "minLength": 3,
        "maxLength": 255,
        "example": "tag"
      },
      "publicKeyFilter": {
        "description": "Public key's filter rule.\n\n\nThe `filter`` rule defines how if the public key is valid to a device.\n\n- When `hostname` object is set, the public key will be used in a device what matches with hostname.\n- When `tags` object is set, it matches the device what contains at least one of that tags. \n",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "hostname": {
                "description": "Public key's regex hostname.",
                "type": "string",
                "example": ".*"
              }
            },
            "required": [
              "hostname"
            ]
          },
          {
            "type": "object",
            "properties": {
              "tags": {
                "description": "Public key's tags.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/tag"
                },
                "minItems": 1,
                "maxItems": 3
              }
            },
            "required": [
              "tags"
            ]
          }
        ]
      },
      "publicKeyUsername": {
        "description": "Public key's regex username.\n\n\nThe `username` field define which user, in the device, may be access through this public key.\n\nIf the field `username` is set as \"\", any user may be accessed.\n",
        "type": "string",
        "default": "",
        "example": ""
      },
      "publicKeyRequest": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/publicKeyData"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/publickKeyFingerprint"
          },
          "tenant_id": {
            "$ref": "#/components/schemas/namespaceTenantID"
          },
          "name": {
            "description": "Public key's name.",
            "type": "string",
            "example": "example"
          },
          "filter": {
            "$ref": "#/components/schemas/publicKeyFilter"
          },
          "username": {
            "$ref": "#/components/schemas/publicKeyUsername"
          }
        },
        "required": [
          "data",
          "fingerprint",
          "tenant_id",
          "name",
          "filter",
          "username"
        ]
      },
      "deviceUID": {
        "description": "Device's UID",
        "type": "string",
        "pattern": "^[0-9a-fA-F]{64}$",
        "example": "13b0c8ea878e61ff849db69461795006a9594c8f6a6390ce0000100b0c9d7d0a"
      },
      "deviceToken": {
        "description": "Device's token",
        "type": "string",
        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.iUCROHt6JHANdtzT6aOuUgOqVFRalOW20SbzRsn5SkI\n"
      },
      "deviceName": {
        "description": "Device's name\n\n\nBy default, the name is the device's MAC address when it just\nadded.\n",
        "type": "string",
        "example": "example"
      },
      "deviceNamespaceName": {
        "description": "Device's namespace name",
        "type": "string",
        "example": "examplespace"
      },
      "deviceStatus": {
        "description": "Device's status",
        "type": "string",
        "enum": [
          "accepted",
          "rejected",
          "pending",
          "unused"
        ],
        "example": "accepted"
      },
      "namespaceName": {
        "description": "Namespace's name",
        "type": "string",
        "example": "examplespace"
      },
      "deviceTags": {
        "description": "Device's Tags list",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/tag"
        },
        "minItems": 1,
        "maxItems": 3,
        "example": [
          "tag1",
          "tag2",
          "tag3"
        ]
      },
      "device": {
        "type": "object",
        "properties": {
          "uid": {
            "$ref": "#/components/schemas/deviceUID"
          },
          "name": {
            "description": "Device's name\n\n\nBy default, the name is the device's MAC address when it just added.\n",
            "type": "string",
            "example": "example"
          },
          "identity": {
            "$ref": "#/components/schemas/deviceIdentity"
          },
          "info": {
            "description": "Device's info",
            "$ref": "#/components/schemas/deviceInfo"
          },
          "public_key": {
            "description": "Device's public key.",
            "type": "string",
            "example": "-----BEGIN RSA PUBLIC KEY-----MIIBCgKCAQEA0vH2Bob3mn+uWVaHlOoZD8ai01W6VnRTnXlnHVF7Ny1Vb7pl1Hc4D8bsBhb1vt7aZOYHbCyDR2r5lsrWXCELE8pY8vzfFDA+jNrLbBCJ66E1BcmTqfXCJcLospWD2lIAwU2O7IPxwZujuVkHrF8nYuEFsKeG60QTWNS++RTqydqe2KmFMEdWCQmYPm/ykN871fSR9+PzoRJMYWidY6Szn+X2ardGmS/Ldhl/PEu9h7xjcQXANWz6yV/RVReGVkLcK6TxlfuxgdpbsWAx+cS52P7xWrshNefHqjpdlm3KNbo6vqfTpU8Ld/FFISXXaa1Md5GyAHF+jzuRzQ5z5aKBGwIDAQAB-----END RSA PUBLIC KEY-----"
          },
          "tenant_id": {
            "$ref": "#/components/schemas/namespaceTenantID"
          },
          "last_seen": {
            "description": "Device's last seen date",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00Z"
          },
          "online": {
            "description": "Device's availability status",
            "type": "boolean",
            "example": true
          },
          "namespace": {
            "description": "Device's namespace",
            "$ref": "#/components/schemas/namespaceName"
          },
          "status": {
            "$ref": "#/components/schemas/deviceStatus"
          },
          "created_at": {
            "description": "Device's creation date",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00Z"
          },
          "remote_addr": {
            "description": "Device's remote address",
            "type": "string",
            "example": "127.0.0.1"
          },
          "position": {
            "description": "Device's geolocation position",
            "type": "object",
            "properties": {
              "latitude": {
                "description": "Device's latitude position",
                "type": "number",
                "example": -31.7566628
              },
              "longitude": {
                "description": "Device's longitude position",
                "type": "number",
                "example": -52.322474
              }
            }
          },
          "tags": {
            "$ref": "#/components/schemas/deviceTags"
          }
        }
      },
      "sessionUID": {
        "description": "Session's UID",
        "type": "string",
        "pattern": "^[0-9a-fA-F]{64}$",
        "example": "13b0c8ea878e61ff849db69461795006a9594c8f6a6390ce0000100b0c9d7d0a"
      },
      "session": {
        "type": "object",
        "properties": {
          "uid": {
            "$ref": "#/components/schemas/sessionUID"
          },
          "device_uid": {
            "$ref": "#/components/schemas/deviceUID"
          },
          "device": {
            "$ref": "#/components/schemas/device"
          },
          "tenant_id": {
            "$ref": "#/components/schemas/namespaceTenantID"
          },
          "username": {
            "description": "Session's username",
            "type": "string"
          },
          "ip_address": {
            "description": "Session's IP address",
            "type": "string",
            "pattern": "^[0-9]{1,3}(\\.[0-9]{1,3}){3}$",
            "example": "127.0.0.1"
          },
          "started_at": {
            "description": "Session's started date",
            "type": "string",
            "example": "2020-01-01T00:00:00Z"
          },
          "last_seen": {
            "description": "Session's last seen date",
            "type": "string",
            "example": "2020-01-01T00:00:00Z"
          },
          "active": {
            "description": "Session's active status",
            "type": "boolean"
          },
          "authenticated": {
            "description": "Session's authenticated status",
            "type": "boolean"
          },
          "recorded": {
            "description": "Session's recorded status",
            "type": "boolean"
          },
          "type": {
            "description": "Session's type",
            "type": "string",
            "enum": [
              "web",
              "term"
            ],
            "example": "web"
          },
          "term": {
            "description": "Session's terminal",
            "type": "string",
            "example": "xterm.js"
          }
        }
      },
      "publicKeyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/publicKeyData"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/publickKeyFingerprint"
          },
          "created_at": {
            "description": "Public key's creation date.",
            "type": "string",
            "format": "date-time",
            "example": "2020-05-01T00:00:00.000Z"
          },
          "tenant_id": {
            "$ref": "#/components/schemas/namespaceTenantID"
          },
          "name": {
            "description": "Public key's name.",
            "type": "string",
            "example": "example"
          },
          "filter": {
            "$ref": "#/components/schemas/publicKeyFilter"
          },
          "username": {
            "$ref": "#/components/schemas/publicKeyUsername"
          }
        }
      },
      "namespace": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/namespaceName"
          },
          "owner": {
            "$ref": "#/components/schemas/userID"
          },
          "tenant_id": {
            "$ref": "#/components/schemas/namespaceTenantID"
          },
          "members": {
            "description": "Namespace's members",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/userID"
                },
                "role": {
                  "$ref": "#/components/schemas/namespaceMemberRole"
                }
              }
            }
          },
          "settings": {
            "description": "Namespace's settings",
            "type": "object",
            "properties": {
              "session_record": {
                "description": "Namespace's session record status",
                "type": "boolean",
                "default": true
              }
            }
          },
          "max_devices": {
            "description": "Namespace's max device numbers",
            "type": "integer",
            "minimum": 3,
            "default": 3
          },
          "device_count": {
            "description": "Namespace's total devices",
            "type": "integer",
            "minimum": 0
          },
          "created_at": {
            "description": "Namespace's creation date",
            "type": "string",
            "format": "date-time",
            "example": "2020-05-01T00:00:00.000Z"
          },
          "billing": {
            "description": "Namespace's billing",
            "type": "object",
            "example": null
          }
        }
      },
      "recordedSessionResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "uid": {
              "description": "Session's ID",
              "type": "string",
              "minLength": 64,
              "maxLength": 64,
              "example": "50d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
            },
            "message": {
              "description": "Session's Data",
              "type": "string"
            },
            "tenant_id": {
              "$ref": "#/components/schemas/namespaceTenantID"
            },
            "time": {
              "description": "Session's time",
              "type": "string",
              "format": "date-time",
              "example": "2020-05-01T00:00:00.000Z"
            },
            "width": {
              "description": "Session's terminal width",
              "type": "integer",
              "minimum": 0,
              "example": 24
            },
            "height": {
              "description": "Session's terminal height",
              "type": "integer",
              "minimum": 0,
              "example": 111
            }
          },
          "required": [
            "uid",
            "message",
            "tenant_id",
            "time",
            "width",
            "height"
          ]
        }
      },
      "firewallRulesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Firewall rule's ID.",
            "type": "string",
            "example": "507f1f77bcf86cd799439011"
          },
          "tenant_id": {
            "$ref": "#/components/schemas/namespaceTenantID"
          },
          "action": {
            "description": "Firewall rule's action",
            "type": "string",
            "enum": [
              "allow",
              "deny"
            ],
            "example": "allow"
          },
          "active": {
            "description": "Firewall rule active's status",
            "type": "boolean",
            "example": true
          },
          "filter": {
            "description": "Firewall rule's filter",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "hostname": {
                    "description": "Firewall rule's hostname",
                    "type": "string",
                    "example": ".*"
                  }
                },
                "required": [
                  "hostname"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "tags": {
                    "description": "Firewall's rule tags",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "maxItems": 3,
                    "example": [
                      "tag1",
                      "tag2",
                      "tag3"
                    ]
                  }
                },
                "required": [
                  "tags"
                ]
              }
            ]
          },
          "priority": {
            "description": "Firewall rule's priority",
            "type": "integer",
            "minimum": 0,
            "example": 1
          },
          "source_ip": {
            "description": "Firewall rule's source IP regexp",
            "type": "string",
            "example": ".*"
          },
          "username": {
            "description": "Firewall rule's username regexp",
            "type": "string",
            "example": ".*"
          }
        },
        "required": [
          "tenant_id",
          "action",
          "active",
          "filter",
          "priority",
          "source_ip",
          "username"
        ]
      },
      "firewallRulesRequest": {
        "type": "object",
        "properties": {
          "action": {
            "description": "Firewall rule's action",
            "type": "string",
            "enum": [
              "allow",
              "deny"
            ],
            "example": "allow"
          },
          "active": {
            "description": "Firewall rule active's status",
            "type": "boolean",
            "example": true
          },
          "filter": {
            "description": "Firewall rule's filter",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "hostname": {
                    "description": "Firewall rule's hostname",
                    "type": "string",
                    "example": ".*"
                  }
                },
                "required": [
                  "hostname"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "tags": {
                    "description": "Firewall's rule tags",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "maxItems": 3,
                    "example": [
                      "tag1",
                      "tag2",
                      "tag3"
                    ]
                  }
                },
                "required": [
                  "tags"
                ]
              }
            ]
          },
          "priority": {
            "description": "Firewall rule's priority",
            "type": "integer",
            "minimum": 0,
            "example": 1
          },
          "source_ip": {
            "description": "Firewall rule's source IP regexp",
            "type": "string",
            "example": ".*"
          },
          "username": {
            "description": "Firewall rule's username regexp",
            "type": "string",
            "example": ".*"
          }
        },
        "required": [
          "action",
          "active",
          "filter",
          "priority",
          "source_ip",
          "username"
        ]
      },
      "userName": {
        "description": "User's name.",
        "type": "string",
        "minLength": 3,
        "maxLength": 20,
        "example": "example"
      },
      "userAdminResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/userID"
          },
          "namespaces": {
            "description": "User's integer of owned namespaces.",
            "type": "integer",
            "minimum": 0
          },
          "confirmed": {
            "description": "User's confirmation.",
            "type": "boolean"
          },
          "created_at": {
            "description": "User's creating date.",
            "type": "string",
            "format": "date-format"
          },
          "last_login": {
            "description": "User's last login date.",
            "type": "string",
            "format": "date-format"
          },
          "name": {
            "$ref": "#/components/schemas/userName"
          },
          "email": {
            "$ref": "#/components/schemas/userEmail"
          },
          "username": {
            "$ref": "#/components/schemas/userUsername"
          },
          "password": {
            "description": "User's hashed password.",
            "type": "string",
            "minLength": 64,
            "maxLength": 64
          }
        }
      },
      "userAdminRequest": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/userName"
          },
          "email": {
            "$ref": "#/components/schemas/userEmail"
          },
          "username": {
            "$ref": "#/components/schemas/userUsername"
          },
          "password": {
            "description": "User's password.",
            "type": "string",
            "maxLength": 30,
            "example": "example"
          }
        },
        "required": [
          "name",
          "email",
          "username",
          "password"
        ]
      }
    },
    "responses": {
      "badRequestEmpty": {
        "description": "Bad request"
      },
      "unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "description": "Error message",
                  "type": "string"
                }
              }
            },
            "example": {
              "message": "missing or malformated jwt"
            }
          }
        }
      },
      "forbiddenEmpty": {
        "description": "Forbidden"
      },
      "notFoundEmpty": {
        "description": "Not found"
      },
      "internalError": {
        "description": "Internal error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "description": "Error message",
                  "type": "string"
                }
              }
            },
            "example": {
              "message": "Internal Server Error"
            }
          }
        }
      },
      "okEmpty": {
        "description": "Success Empty body"
      },
      "invalidFields": {
        "description": "Invalid Fields",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": [
              "username",
              "email"
            ]
          }
        }
      },
      "conflictFields": {
        "description": "Conflict Fields",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": [
              "username",
              "email"
            ]
          }
        }
      },
      "conflictEmpty": {
        "description": "Conflict"
      },
      "notAcceptableEmpty": {
        "description": "Not Acceptable"
      }
    },
    "parameters": {
      "pageQuery": {
        "name": "page",
        "description": "Pagination page number",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        },
        "in": "query"
      },
      "perPageQuery": {
        "name": "per_page",
        "description": "Pagination items per page",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 10
        },
        "in": "query"
      },
      "deviceUIDPath": {
        "name": "uid",
        "description": "Device's UID",
        "schema": {
          "$ref": "#/components/schemas/deviceUID"
        },
        "required": true,
        "in": "path"
      },
      "sessionUIDPath": {
        "name": "uid",
        "schema": {
          "$ref": "#/components/schemas/sessionUID"
        },
        "required": true,
        "in": "path"
      },
      "filterQuery": {
        "name": "filter",
        "description": "Filter field receives a base64 enconded JSON object for limit a search.\nThe JSON object should have a property called `type`, it will filter by a `property` called `confirmed` where the value is `eq` to `true`. \n\nThis is a example to filter and get only the confirmed users.\n```json\n\n[\n  {\n  \"type\": \"property\",\n  \"params\": {\n      \"name\": \"confirmed\",\n      \"operator\": \"eq\",\n      \"value\": true\n      }\n  }\n]\n\n```\n\n\n\nSo, the output enconded string will result on:  \n\n\n```WwogICAgewogICAgInR5cGUiOiAicHJvcGVydHkiLAogICAgInBhcmFtcyI6IHsKICAgICAgICAibmFtZSI6ICJjb25maXJtZWQiLAogICAgICAgICJvcGVyYXRvciI6ICJlcSIsCiAgICAgICAgInZhbHVlIjogdHJ1ZQogICAgICAgIH0KICAgIH0KXQ==```\n",
        "schema": {
          "type": "string",
          "format": "byte"
        },
        "in": "query"
      },
      "publicKeyFingerprintPath": {
        "name": "fingerprint",
        "description": "Public key's fingerprint.",
        "schema": {
          "$ref": "#/components/schemas/publickKeyFingerprint"
        },
        "required": true,
        "in": "path"
      },
      "tagNamePath": {
        "name": "name",
        "description": "Tag's name",
        "schema": {
          "$ref": "#/components/schemas/tag"
        },
        "required": true,
        "in": "path"
      },
      "namespaceTenantIDPath": {
        "name": "tenant",
        "description": "Namespace's tenant ID",
        "schema": {
          "$ref": "#/components/schemas/namespaceTenantID"
        },
        "required": true,
        "in": "path"
      },
      "namespaceMemberIDPath": {
        "name": "uid",
        "description": "Member's ID",
        "schema": {
          "type": "string"
        },
        "required": true,
        "in": "path"
      },
      "deviceTagPath": {
        "name": "name",
        "description": "Device's tag name",
        "schema": {
          "$ref": "#/components/schemas/tag"
        },
        "required": true,
        "in": "path"
      },
      "deviceStatusPath": {
        "name": "status",
        "description": "Device's status",
        "schema": {
          "$ref": "#/components/schemas/deviceStatus"
        },
        "required": true,
        "in": "path"
      }
    }
  },
  "paths": {
    "/api/sessions/{uid}/record": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sessionUIDPath"
        }
      ],
      "post": {
        "operationId": "enableRecordSession",
        "summary": "Enable a session record",
        "description": "Enable a session record",
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "cloud",
          "internal",
          "sessions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recordedSessionResponse"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to enable a session record"
          },
          "422": {
            "description": "StatusUnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteRecordSession",
        "summary": "Delete a session record",
        "description": "Delete a session record",
        "tags": [
          "cloud",
          "internal",
          "sessions"
        ],
        "responses": {
          "200": {
            "description": "Success to delete a session record"
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/devices": {
      "get": {
        "operationId": "getDevicesAdmin",
        "summary": "Get devices admin",
        "description": "Get a list of devices.",
        "tags": [
          "admin",
          "external",
          "devices"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "filter",
            "description": "Device's filter\n\n\nFilter field receives a base64 enconded JSON object for limit a search.\nThe JSON object should have a property called `type`, it will filter by a `property` called `name` where the value should `contains` `linux`.\n\nIf you want get only Devices name as `Linux`, the JSON object will looks\nlike this \n\n```json\n  [\n    {\n      \"type\":\"property\",\n      \"params\":\n        {\n          \"name\":\"name\",\n          \"operator\":\"contains\",\n          \"value\":\"linux\"\n        }\n    }\n  ]\n```\n\nSo, the output encoded string will result on:\n`W3sidHlwZSI6InByb3BlcnR5IiwicGFyYW1zIjp7Im5hbWUiOiJuYW1lIiwib3BlcmF0b3IiOiJjb250YWlucyIsInZhbHVlIjoiZDAifX1d`\n",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "example": "W3sidHlwZSI6InByb3BlcnR5IiwicGFyYW1zIjp7Im5hbWUiOiJuYW1lIiwib3BlcmF0b3IiOiJjb250YWlucyIsInZhbHVlIjoiZDAifX1d\n"
            },
            "required": false,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/perPageQuery"
          },
          {
            "name": "status",
            "description": "Device's status",
            "schema": {
              "$ref": "#/components/schemas/deviceStatus"
            },
            "required": false,
            "in": "query"
          },
          {
            "name": "sort_by",
            "description": "Device's property to sort of",
            "schema": {
              "type": "string",
              "example": "name"
            },
            "required": false,
            "in": "query"
          },
          {
            "name": "order_by",
            "schema": {
              "description": "Device's list order",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc"
            },
            "required": false,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a list of devices.",
            "headers": {
              "X-Total-Count": {
                "description": "Devices' total number.",
                "schema": {
                  "type": "string",
                  "minimum": 0,
                  "readOnly": true
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/device"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/devices/{uid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deviceUIDPath"
        }
      ],
      "get": {
        "operationId": "getDeviceAdmin",
        "summary": "Get device admin",
        "description": "Get a device.",
        "tags": [
          "admin",
          "external",
          "devices"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a device.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/device"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteDeviceAdmin",
        "summary": "Delete device admin",
        "description": "Delete a device.",
        "tags": [
          "admin",
          "external",
          "devices"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to delete a device."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "patch": {
        "operationId": "updateDeviceNameAdmin",
        "summary": "Update device name Admin",
        "description": "Update device's name.",
        "tags": [
          "admin",
          "external",
          "devices"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Device's new name.",
                    "type": "string",
                    "example": "example"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to update device's name."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/devices/{uid}/{status}": {
      "patch": {
        "operationId": "updateDeviceStatusAdmin",
        "summary": "Update status Admin",
        "description": "Update device's status.",
        "tags": [
          "admin",
          "external",
          "devices"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/deviceUIDPath"
          },
          {
            "$ref": "#/components/parameters/deviceStatusPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to update device status."
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "402": {
            "description": "Payment required."
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/firewall/rules": {
      "post": {
        "operationId": "createFirewallRuleAdmin",
        "summary": "Create firewall rule Admin",
        "description": "Create a firewall rule.",
        "tags": [
          "admin",
          "external",
          "rules"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/firewallRulesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to create firewall rule.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/firewallRulesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "get": {
        "operationId": "getFirewallRulesAdmin",
        "summary": "Get firewall rules Admin",
        "description": "Get a list of firewall rules.",
        "tags": [
          "admin",
          "external",
          "rules"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/perPageQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get firewall rules.",
            "headers": {
              "X-Total-Count": {
                "description": "Firewall rules' total number.",
                "schema": {
                  "type": "string",
                  "minimum": 0,
                  "readOnly": true
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/firewallRulesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/firewall/rules/{id}": {
      "parameters": [
        {
          "name": "id",
          "schema": {
            "description": "Firewall rule's ID",
            "type": "integer"
          },
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "operationId": "getFirewallRuleAdmin",
        "summary": "Get firewall rule admin",
        "description": "Get a firewall rule.",
        "tags": [
          "admin",
          "external",
          "rules"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get firewall rule.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/firewallRulesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "put": {
        "operationId": "updateFirewallRuleAdmin",
        "summary": "Update firewall rule admin",
        "description": "Update a firewall rule.",
        "tags": [
          "admin",
          "external",
          "rules"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/firewallRulesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to update firewall rule.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/firewallRulesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteFirewallRuleAdmin",
        "summary": "Delete firewall rule admin",
        "description": "Delete a firewall rule.",
        "tags": [
          "admin",
          "external",
          "rules"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to delete a firewall rule."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/sessions": {
      "get": {
        "operationId": "getSessionsAdmin",
        "summary": "Get sessions admin",
        "description": "Get a list sessions.",
        "tags": [
          "admin",
          "external",
          "sessions"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/perPageQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get list of sessions.",
            "headers": {
              "X-Total-Count": {
                "description": "Sessions' total number.",
                "schema": {
                  "type": "string",
                  "minimum": 0,
                  "readOnly": true
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/session"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/sessions/{uid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sessionUIDPath"
        }
      ],
      "get": {
        "operationId": "getSessionAdmin",
        "summary": "Get session admin",
        "description": "Get a session.",
        "tags": [
          "admin",
          "external",
          "sessions"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a session.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/session"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "post": {
        "operationId": "setSessionAuthenticationStatusAdmin",
        "summary": "Set session authentication status admin",
        "description": "Set session authentication status.",
        "tags": [
          "admin",
          "external",
          "sessions"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "authenticated": {
                    "description": "Session's authentication status.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/sshkeys/public-keys": {
      "get": {
        "operationId": "getPublicKeysAdmin",
        "summary": "Get public keys admin",
        "description": "Get a list from all public keys.",
        "tags": [
          "ssh"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filterQuery"
          },
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/perPageQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a list of public keys.",
            "headers": {
              "X-Total-Count": {
                "description": "Public keys' total number.",
                "schema": {
                  "type": "string",
                  "minimum": 0,
                  "readOnly": true
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicKeyResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "post": {
        "operationId": "createPublicKeyAdmin",
        "summary": "Create public key admin",
        "description": "Create a new public key.",
        "tags": [
          "ssh"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publicKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to create a public key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicKeyResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "422": {
            "description": "UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/namespaces": {
      "get": {
        "operationId": "getNamespacesAdmin",
        "summary": "Get namespaces admin",
        "description": "Returns a list of namespaces.",
        "tags": [
          "admin",
          "external",
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "filter",
            "description": "Namespaces's filter.\n\n\nFilter field receives a base64 enconded JSON object for limit a search.\nThe JSON object should have a property called `type`, it will filter by a `property` called `name` where the value should `contains` `examplespace`.\n\nIf you want get only Namespaces name as `examplespace`, the JSON object will looks\nlike this \n\n```json\n[\n  {\n    \"type\":\"property\",\n    \"params\":{\n      \"name\":\"name\",\n      \"operator\":\"contains\",\n      \"value\":\"examplespace\"\n    }\n  }\n]\n```\n\nSo, the output encoded string will result on:\n`W3sidHlwZSI6InByb3BlcnR5IiwicGFyYW1zIjp7Im5hbWUiOiJuYW1lIiwib3BlcmF0b3IiOiJjb250YWlucyIsInZhbHVlIjoiZXhhbXBsZXNwYWNlIn19XQ==`\n",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "example": "W3sidHlwZSI6InByb3BlcnR5IiwicGFyYW1zIjp7Im5hbWUiOiJuYW1lIiwib3BlcmF0b3IiOiJjb250YWlucyIsInZhbHVlIjoiZXhhbXBsZXNwYWNlIn19XQ=="
            },
            "required": false,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/perPageQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a namespace list.",
            "headers": {
              "X-Total-Count": {
                "description": "Namespaces' total number.",
                "schema": {
                  "type": "string",
                  "minimum": 0
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/namespace"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/namespaces/{tenant}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/namespaceTenantIDPath"
        }
      ],
      "get": {
        "operationId": "getNamespaceAdmin",
        "summary": "Get namespace admin",
        "description": "Get a namespace.",
        "tags": [
          "admin",
          "external",
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a namespace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namespace"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "post": {
        "operationId": "createNamespaceAdmin",
        "summary": "Create namespace admin",
        "description": "Create a namespace.",
        "tags": [
          "admin",
          "external",
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/namespaceName"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to create a namespace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namespace"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespaceAdmin",
        "summary": "Delete namespace admin",
        "description": "Delete a namespace.",
        "tags": [
          "admin",
          "external",
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to delete a namespace."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/namespaces-update/{tenantID}": {
      "parameters": [
        {
          "name": "tenantID",
          "description": "Namespace's tenant ID",
          "schema": {
            "$ref": "#/components/schemas/namespaceTenantID"
          },
          "required": true,
          "in": "path"
        }
      ],
      "put": {
        "operationId": "editNamespaceAdmin",
        "summary": "Edit namespace admin",
        "description": "Edit a namespace.",
        "tags": [
          "admin",
          "external",
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/namespace"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to edit a namespace."
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/login": {
      "post": {
        "operationId": "loginAdmin",
        "summary": "Login on Admin",
        "description": "Login on Admin",
        "tags": [
          "admin",
          "external"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Admin's username",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20
                  },
                  "password": {
                    "description": "Admin's password",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 30
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to Login on Admin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "description": "JWT token",
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJleGFtcGxlIiwibmFtZSI6ImV4YW1wbGUiLCJpYXQiOjE1MTYyMzkwMjJ9.zqCt70KspnNnitZlv89hDbFZ5iGMMRUn0wFEmmlY-to\n"
                    },
                    "user": {
                      "description": "username",
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 20,
                      "example": "admin"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "aapplication/json": {
                "schema": {
                  "type": "string"
                },
                "example": "unauthorized"
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/users": {
      "post": {
        "operationId": "createUserAdmin",
        "summary": "Create a User admin",
        "description": "Create a User.",
        "tags": [
          "admin",
          "external",
          "users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userAdminRequest"
              },
              "example": {
                "name": "example",
                "email": "example@example.com",
                "username": "example",
                "password": "example"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okEmpty"
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "get": {
        "operationId": "getUsers",
        "summary": "Get users",
        "description": "Get a list of users.",
        "tags": [
          "admin",
          "external",
          "users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filterQuery"
          },
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/perPageQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a list of users.",
            "headers": {
              "X-Total-Count": {
                "description": "users' total number.",
                "schema": {
                  "type": "string",
                  "minimum": 0,
                  "readOnly": true
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/userAdminResponse"
                  }
                },
                "examples": {
                  "one_user": {
                    "value": [
                      {
                        "id": "507f1f77bcf86cd799439011",
                        "namespaces": 0,
                        "confirmed": true,
                        "created_at": "2020-05-01T00:00:00.000Z",
                        "last_login": "2020-05-01T00:00:00.000Z",
                        "name": "example",
                        "email": "example@example.com",
                        "username": "example",
                        "password": "50d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
                      }
                    ]
                  },
                  "two_users": {
                    "value": [
                      {
                        "id": "507f1f77bcf86cd799439011",
                        "namespaces": 0,
                        "confirmed": true,
                        "created_at": "2020-05-01T00:00:00.000Z",
                        "last_login": "2020-05-01T00:00:00.000Z",
                        "name": "example",
                        "email": "example@example.com",
                        "username": "example",
                        "password": "50d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
                      },
                      {
                        "id": "507f191e810c19729de860ea",
                        "namespaces": 2,
                        "confirmed": true,
                        "created_at": "2012-01-02T00:00:00.000Z",
                        "last_login": "2012-01-02T00:00:00.000Z",
                        "name": "example",
                        "email": "example@example.com",
                        "username": "example",
                        "password": "50d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/users/{id}": {
      "parameters": [
        {
          "name": "id",
          "schema": {
            "description": "User's ID",
            "type": "string",
            "example": "507f1f77bcf86cd799439011"
          },
          "required": true,
          "in": "path"
        }
      ],
      "delete": {
        "operationId": "deleteUser",
        "summary": "Delete user",
        "description": "Delete a user.",
        "tags": [
          "admin",
          "external",
          "users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okEmpty"
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "put": {
        "operationId": "updateUser",
        "summary": "Update user",
        "description": "Update a user.",
        "tags": [
          "admin",
          "external",
          "users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userAdminRequest"
              },
              "examples": {
                "update_name": {
                  "value": {
                    "name": "example_new",
                    "email": "example@example.com",
                    "username": "example",
                    "password": ""
                  }
                },
                "update_password": {
                  "value": {
                    "name": "example",
                    "email": "example_new@example.com",
                    "username": "example",
                    "password": "example_new"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okEmpty"
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "get": {
        "operationId": "getUser",
        "summary": "Get user",
        "description": "Get a user.",
        "tags": [
          "admin",
          "external",
          "users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/userAdminResponse"
                    },
                    "namespacesOwned": {
                      "description": "User's integer of owned namespaces",
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "user_confirmed": {
                    "value": {
                      "user": {
                        "id": "507f1f77bcf86cd799439011",
                        "namespaces": 0,
                        "confirmed": true,
                        "created_at": "2020-05-01T00:00:00.000Z",
                        "last_login": "2020-05-01T00:00:00.000Z",
                        "name": "example",
                        "email": "example@example.com",
                        "username": "example",
                        "password": "50d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
                      },
                      "namespacesOwned": 0
                    }
                  },
                  "user_not_confirmed": {
                    "value": {
                      "user": {
                        "id": "507f1f77bcf86cd799439011",
                        "namespaces": 2,
                        "confirmed": false,
                        "created_at": "2012-01-02T00:00:00.000Z",
                        "last_login": "2012-01-02T00:00:00.000Z",
                        "name": "example",
                        "email": "example@example.com",
                        "username": "example",
                        "password": "50d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
                      },
                      "namespacesOwned": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/stats": {
      "get": {
        "operationId": "getStats",
        "summary": "Get stats",
        "description": "Get stats about the ShellHub instance.",
        "tags": [
          "admin",
          "external",
          "stats"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get stats about the ShellHub instance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "registered_users": {
                      "description": "Number of registered users.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "registered_devices": {
                      "description": "Number of registered devices.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "online_devices": {
                      "description": "Number of online devices.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "active_sessions": {
                      "description": "Number of active sessions.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "pending_devices": {
                      "description": "Number of pending devices.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "rejected_devices": {
                      "description": "Number of rejected devices.",
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/license": {
      "get": {
        "operationId": "getLicense",
        "summary": "Get license data",
        "description": "Get the license data.",
        "tags": [
          "admin",
          "external",
          "license"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "License's ID",
                      "type": "string",
                      "example": "x3dd0d1f8-8246-4519-b11a-a3dd33717f65"
                    },
                    "expired": {
                      "description": "License's expired status",
                      "type": "boolean"
                    },
                    "about_to_expire": {
                      "description": "License's about to expire status",
                      "type": "boolean"
                    },
                    "grace_period": {
                      "description": "License's grace period status",
                      "type": "boolean"
                    },
                    "issued_at": {
                      "description": "License's issued at\n\nIt is the number of seconds elapsed since January 1, 1970 UTC.",
                      "type": "integer",
                      "minimum": -1,
                      "example": -1
                    },
                    "starts_at": {
                      "description": "License's started at\n\nIt is the number of seconds elapsed since January 1, 1970 UTC.",
                      "type": "integer",
                      "minimum": -1,
                      "example": -1
                    },
                    "expires_at": {
                      "description": "License's expired at\n\nIt is the number of seconds elapsed since January 1, 1970 UTC.\n\n`-1` means license does not expire",
                      "type": "integer",
                      "minimum": -1,
                      "example": -1
                    },
                    "allowed_regions": {
                      "description": "License's allowed regions\n\nIt is a list of regions in `ISO 3166-1 alpha-2` format.",
                      "type": "array",
                      "items": {
                        "description": "License's allowed regions",
                        "type": "string",
                        "enum": [
                          "AD",
                          "AE",
                          "AF",
                          "AG",
                          "AI",
                          "AL",
                          "AM",
                          "AO",
                          "AQ",
                          "AR",
                          "AS",
                          "AT",
                          "AU",
                          "AW",
                          "AX",
                          "AZ",
                          "BA",
                          "BB",
                          "BD",
                          "BE",
                          "BF",
                          "BG",
                          "BH",
                          "BI",
                          "BJ",
                          "BL",
                          "BM",
                          "BN",
                          "BO",
                          "BQ",
                          "BR",
                          "BS",
                          "BT",
                          "BV",
                          "BW",
                          "BY",
                          "BZ",
                          "CA",
                          "CC",
                          "CD",
                          "CF",
                          "CG",
                          "CH",
                          "CI",
                          "CK",
                          "CL",
                          "CM",
                          "CN",
                          "CO",
                          "CR",
                          "CU",
                          "CV",
                          "CW",
                          "CX",
                          "CY",
                          "CZ",
                          "DE",
                          "DJ",
                          "DK",
                          "DM",
                          "DO",
                          "DZ",
                          "EC",
                          "EE",
                          "EG",
                          "EH",
                          "ER",
                          "ES",
                          "ET",
                          "FI",
                          "FJ",
                          "FK",
                          "FM",
                          "FO",
                          "FR",
                          "GA",
                          "GB",
                          "GD",
                          "GE",
                          "GF",
                          "GG",
                          "GH",
                          "GI",
                          "GL",
                          "GM",
                          "GN",
                          "GP",
                          "GQ",
                          "GR",
                          "GS",
                          "GT",
                          "GU",
                          "GW",
                          "GY",
                          "HK",
                          "HM",
                          "HN",
                          "HR",
                          "HT",
                          "HU",
                          "ID",
                          "IE",
                          "IL",
                          "IM",
                          "IN",
                          "IO",
                          "IQ",
                          "IR",
                          "IS",
                          "IT",
                          "JE",
                          "JM",
                          "JO",
                          "JP",
                          "KE",
                          "KG",
                          "KH",
                          "KI",
                          "KM",
                          "KN",
                          "KP",
                          "KR",
                          "KW",
                          "KY",
                          "KZ",
                          "LA",
                          "LB",
                          "LC",
                          "LI",
                          "LK",
                          "LR",
                          "LS",
                          "LT",
                          "LU",
                          "LV",
                          "LY",
                          "MA",
                          "MC",
                          "MD",
                          "ME",
                          "MF",
                          "MG",
                          "MH",
                          "MK",
                          "ML",
                          "MM",
                          "MN",
                          "MO",
                          "MP",
                          "MQ",
                          "MR",
                          "MS",
                          "MT",
                          "MU",
                          "MV",
                          "MW",
                          "MX",
                          "MY",
                          "MZ",
                          "NA",
                          "NC",
                          "NE",
                          "NF",
                          "NG",
                          "NI",
                          "NL",
                          "NO",
                          "NP",
                          "NR",
                          "NU",
                          "NZ",
                          "OM",
                          "PA",
                          "PE",
                          "PF",
                          "PG",
                          "PH",
                          "PK",
                          "PL",
                          "PM",
                          "PN",
                          "PR",
                          "PS",
                          "PT",
                          "PW",
                          "PY",
                          "QA",
                          "RE",
                          "RO",
                          "RS",
                          "RU",
                          "RW",
                          "SA",
                          "SB",
                          "SC",
                          "SD",
                          "SE",
                          "SG",
                          "SH",
                          "SI",
                          "SJ",
                          "SK",
                          "SL",
                          "SM",
                          "SN",
                          "SO",
                          "SR",
                          "SS",
                          "ST",
                          "SV",
                          "SX",
                          "SY",
                          "SZ",
                          "TC",
                          "TD",
                          "TF",
                          "TG",
                          "TH",
                          "TJ",
                          "TK",
                          "TM",
                          "TN",
                          "TO",
                          "TR",
                          "TT",
                          "TV",
                          "TW",
                          "TZ",
                          "UA",
                          "UG",
                          "UM",
                          "US",
                          "UY",
                          "UZ",
                          "VA",
                          "VC",
                          "VE",
                          "VG",
                          "VI",
                          "VN",
                          "VU",
                          "WF",
                          "WS",
                          "YE",
                          "YT",
                          "ZA",
                          "ZM",
                          "ZW"
                        ]
                      },
                      "example": []
                    },
                    "customer": {
                      "description": "License's customer",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Customer's ID",
                          "type": "string",
                          "example": "x3dd0d1f8-8246-4519-b11a-a3dd33717f65"
                        },
                        "name": {
                          "description": "Customer's name",
                          "type": "string",
                          "example": "ShellHub Full Perpetual License"
                        },
                        "email": {
                          "description": "Customer's email",
                          "type": "string",
                          "format": "email",
                          "example": "contato@ossystems.com.br"
                        },
                        "company": {
                          "description": "Customer's company",
                          "type": "string",
                          "example": "O.S. Systems"
                        }
                      }
                    },
                    "features": {
                      "description": "License's features",
                      "type": "object",
                      "properties": {
                        "devices": {
                          "description": "Number of devices allowed\n\n\n`-1` means unlimited number of devices and any other\nnumber means the number of devices allowed\n",
                          "type": "integer",
                          "minimum": -1,
                          "example": -1
                        },
                        "session_recording": {
                          "description": "Session recording status",
                          "type": "boolean",
                          "example": true
                        },
                        "firewall_rules": {
                          "description": "Firewall rules status",
                          "type": "boolean",
                          "example": true
                        },
                        "reports": {
                          "description": "Reports status",
                          "type": "boolean",
                          "example": true
                        },
                        "login_link": {
                          "description": "Login link status",
                          "type": "boolean",
                          "example": true
                        },
                        "billing": {
                          "description": "Billing status",
                          "type": "boolean",
                          "example": true
                        }
                      },
                      "required": [
                        "devices",
                        "session_recording",
                        "firewall_rules",
                        "reports",
                        "login_link",
                        "billing"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "expired",
                    "about_to_expire",
                    "grace_period",
                    "issued_at",
                    "starts_at",
                    "expires_at",
                    "allowed_regions",
                    "customer",
                    "features"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "post": {
        "operationId": "sendLicense",
        "summary": "Send license data",
        "description": "Send license data",
        "tags": [
          "admin",
          "external",
          "license"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "License's file",
                "type": "string",
                "format": "binary",
                "example": "ewogICJpZCI6ICJ4eHh4eHh4eC14eHh4LXh4eHgteHh4eC14eHh4eHh4eHh4eHgiLAogICJpc3N1ZWRfYXQiOiAtMSwKICAic3RhcnRzX2F0IjogLTEsCiAgImV4cGlyZXNfYXQiOiAtMSwKICAiY3VzdG9tZXIiOiB7CiAgICAiaWQiOiAieHh4eHh4eHgteHh4eC14eHh4LXh4eHgteHh4eHh4eHh4eHh4IiwKICAgICJuYW1lIjogIlNoZWxsSHViIEZ1bGwgUGVycGV0dWFsIExpY2Vuc2UiLAogICAgImVtYWlsIjogImNvbnRhdG9Ab3NzeXN0ZW1zLmNvbS5iciIsCiAgICAiY29tcGFueSI6ICJPLlMuIFN5c3RlbXMiCiAgfSwKICAiZmVhdHVyZXMiOiB7CiAgICAiZGV2aWNlcyI6IC0xLAogICAgInNlc3Npb25fcmVjb3JkaW5nIjogdHJ1ZSwKICAgICJmaXJld2FsbF9ydWxlcyI6IHRydWUsCiAgICAicmVwb3J0cyI6IHRydWUsCiAgICAibG9naW5fbGluayI6IHRydWUsCiAgICAiYmlsbGluZyI6IHRydWUKICB9Cn0KHtQQZHb8b5kZ\n"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to send license data"
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/auth/token/{id}": {
      "get": {
        "operationId": "getUserTokenAdmin",
        "summary": "Get user token",
        "description": "Get user JWT token to login.",
        "tags": [
          "admin",
          "users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "User's ID",
            "schema": {
              "$ref": "#/components/schemas/userID"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get the JWT token to login.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "$ref": "#/components/schemas/jwt"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/export/namespaces": {
      "get": {
        "operationId": "exportNamespaces",
        "summary": "export namespace",
        "description": "Export namespaces to csv file.",
        "tags": [
          "admin",
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "filter",
            "description": "Namespace's filter\n\n\nFilter field receives a base64 enconded JSON object for limit a search.\nThe JSON object should have a property called `type`, it will filter by a `property` called `devices` where the value should be 'gt' `0`.\n\nAn example of JSON object will looks like this:\n\n```json\n  [\n    {\n      \"type\":\"property\",\n      \"params\":\n        {\n          \"name\":\"devices\",\n          \"operator\":\"eq\",\n          \"value\":\"0\"\n        }\n    }\n  ]\n```\n\nSo, the output encoded string will result on:\n`W3sidHlwZSI6InByb3BlcnR5IiwicGFyYW1zIjp7Im5hbWUiOiJkZXZpY2VzIiwib3BlcmF0b3IiOiJndCIsInZhbHVlIjoiMCJ9fV0=`\n",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "example": "W3sidHlwZSI6InByb3BlcnR5IiwicGFyYW1zIjp7Im5hbWUiOiJkZXZpY2VzIiwib3BlcmF0b3IiOiJndCIsInZhbHVlIjoiMCJ9fV0="
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/perPageQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to export namespaces.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/admin/api/export/users": {
      "get": {
        "operationId": "exportUsers",
        "summary": "export users",
        "description": "Export users to csv file.",
        "tags": [
          "admin",
          "users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "filter",
            "description": "User's filter\n\n\nFilter field receives a base64 enconded JSON object for limit a search.\nThe JSON object should have a property called `type`, it will filter by a `property` called `namespaces` where the value should be `eq` to `0`.\n\nAn example of JSON object will looks like this:\n\n```json\n  [\n    {\n      \"type\":\"property\",\n      \"params\":\n        {\n          \"name\":\"namespace\",\n          \"operator\":\"eq\",\n          \"value\":\"0\"\n        }\n    }\n  ]\n```\n\nSo, the output encoded string will result on:\n`W3sidHlwZSI6InByb3BlcnR5IiwicGFyYW1zIjp7Im5hbWUiOiJuYW1lc3BhY2VzIiwib3BlcmF0b3IiOiJndCIsInZhbHVlIjoiMCJ9fV0=`\n",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "example": "W3sidHlwZSI6InByb3BlcnR5IiwicGFyYW1zIjp7Im5hbWUiOiJuYW1lc3BhY2VzIiwib3BlcmF0b3IiOiJndCIsInZhbHVlIjoiMCJ9fV0="
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/perPageQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to export users.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "operationId": "login",
        "summary": "Login",
        "description": "Get data about a user",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userAuth"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/auth/user": {
      "post": {
        "operationId": "login",
        "summary": "Login",
        "description": "Get data about a user",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userAuth"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/devices/auth": {
      "post": {
        "operationId": "postAuthDevice",
        "summary": "Auth device",
        "description": "Auth a device.\n\nEvery 30 seconds, this route is hit by internal ShellHub to check device\navailability.\n",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "X-Real-IP",
            "schema": {
              "description": "Device's IP address.\n\n\n`X-Real-IP` header is used to set a geolocation position to device when\n`geoip` feature is enable.\n",
              "type": "string",
              "pattern": "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$",
              "example": "127.0.0.1"
            },
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "info": {
                    "$ref": "#/components/schemas/deviceInfo"
                  },
                  "sessions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "hostname": {
                    "type": "string",
                    "pattern": "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*"
                  },
                  "identity": {
                    "$ref": "#/components/schemas/deviceIdentity"
                  },
                  "public_key": {
                    "$ref": "#/components/schemas/publicKeyRequest"
                  },
                  "tenant_id": {
                    "$ref": "#/components/schemas/namespaceTenantID"
                  }
                },
                "required": [
                  "info",
                  "session",
                  "hostname",
                  "public_key",
                  "tenant_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to auth device",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uid": {
                      "$ref": "#/components/schemas/deviceUID"
                    },
                    "token": {
                      "$ref": "#/components/schemas/deviceToken"
                    },
                    "name": {
                      "$ref": "#/components/schemas/deviceName"
                    },
                    "namespace": {
                      "$ref": "#/components/schemas/deviceNamespaceName"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/auth/device": {
      "post": {
        "operationId": "postAuthDevice",
        "summary": "Auth device",
        "description": "Auth a device.\n\nEvery 30 seconds, this route is hit by internal ShellHub to check device\navailability.\n",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "X-Real-IP",
            "schema": {
              "description": "Device's IP address.\n\n\n`X-Real-IP` header is used to set a geolocation position to device when\n`geoip` feature is enable.\n",
              "type": "string",
              "pattern": "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$",
              "example": "127.0.0.1"
            },
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "info": {
                    "$ref": "#/components/schemas/deviceInfo"
                  },
                  "sessions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "hostname": {
                    "type": "string",
                    "pattern": "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*"
                  },
                  "identity": {
                    "$ref": "#/components/schemas/deviceIdentity"
                  },
                  "public_key": {
                    "$ref": "#/components/schemas/publicKeyRequest"
                  },
                  "tenant_id": {
                    "$ref": "#/components/schemas/namespaceTenantID"
                  }
                },
                "required": [
                  "info",
                  "session",
                  "hostname",
                  "public_key",
                  "tenant_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to auth device",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uid": {
                      "$ref": "#/components/schemas/deviceUID"
                    },
                    "token": {
                      "$ref": "#/components/schemas/deviceToken"
                    },
                    "name": {
                      "$ref": "#/components/schemas/deviceName"
                    },
                    "namespace": {
                      "$ref": "#/components/schemas/deviceNamespaceName"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/auth/ssh": {
      "post": {
        "operationId": "setSSHKey",
        "summary": "Set SSH key",
        "description": "Set a SSH public key.",
        "tags": [
          "ssh"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fingerprint": {
                    "description": "Device fingerprint",
                    "type": "string"
                  },
                  "data": {
                    "description": "Device SSH public key",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success set SSH key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": {
                      "description": "Device signature",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/auth/token/{tenant}": {
      "get": {
        "operationId": "getNamespaceToken",
        "summary": "Get a new namespace's token",
        "description": "This route works like a login's one; returns a JWT token and extra\ninformation about namespace.\n\nYou can use this route to swap between namespaces.\n",
        "tags": [
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "tenant",
            "description": "Namespace Tenant",
            "schema": {
              "type": "string"
            },
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get namespace's token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userAuth"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/token/{tenant}": {
      "get": {
        "operationId": "getToken",
        "summary": "Get token",
        "description": "Get a token from its tenant.",
        "tags": [
          "users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "tenant",
            "description": "Tenant",
            "schema": {
              "type": "string"
            },
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success get token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userAuth"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/users/{id}/data": {
      "patch": {
        "operationId": "updateUserData",
        "summary": "Update user data",
        "description": "Update all user information.",
        "tags": [
          "users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "User ID",
            "schema": {
              "type": "string"
            },
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "User ID",
                    "type": "string"
                  },
                  "name": {
                    "description": "User name",
                    "type": "string"
                  },
                  "email": {
                    "description": "User e-mail",
                    "type": "string"
                  },
                  "username": {
                    "description": "User",
                    "type": "string"
                  },
                  "password": {
                    "description": "User password",
                    "type": "string"
                  },
                  "namespaces": {
                    "description": "User namespace",
                    "type": "integer"
                  },
                  "authenticated": {
                    "description": "User authentication state",
                    "type": "boolean"
                  },
                  "created_at": {
                    "description": "User creation date",
                    "type": "string"
                  },
                  "last_login": {
                    "description": "User last login date",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okEmpty"
          },
          "400": {
            "$ref": "#/components/responses/invalidFields"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "409": {
            "$ref": "#/components/responses/conflictFields"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/users/{id}/password": {
      "patch": {
        "operationId": "updateUserPassword",
        "summary": "Update user password",
        "description": "Update only the user password.",
        "tags": [
          "users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "User ID",
            "schema": {
              "type": "string"
            },
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_password": {
                    "description": "User current password",
                    "type": "string"
                  },
                  "new_password": {
                    "description": "User new password",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okEmpty"
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/users/security/{tenant}": {
      "put": {
        "operationId": "setSessionRecord",
        "summary": "Set session record",
        "description": "Define if sessions will be recorded.",
        "tags": [
          "users",
          "sessions"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "tenant",
            "description": "Namespace's tenant ID.",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
              "example": "3dd0d1f8-8246-4519-b11a-a3dd33717f65"
            },
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "session_record": {
                    "description": "Session's record status.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "session_record"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to set session record status."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/users/security": {
      "get": {
        "operationId": "getSessionRecord",
        "summary": "Get session record",
        "description": "Get status from if `session record` feature is enable.",
        "tags": [
          "users",
          "sessions"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success get session record status",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Session record status",
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/devices": {
      "get": {
        "operationId": "getDevices",
        "summary": "Get devices",
        "description": "Get a list of devices.",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "filter",
            "description": "Device's filter\n\n\nFilter field receives a base64 enconded JSON object for limit a search.\nThe JSON object should have a property called `type`, it will filter by a `property` called `name` where the value should `contains` `linux`.\n\nIf you want get only Devices name as `Linux`, the JSON object will looks\nlike this \n\n```json\n  [\n    {\n      \"type\":\"property\",\n      \"params\":\n        {\n          \"name\":\"name\",\n          \"operator\":\"contains\",\n          \"value\":\"linux\"\n        }\n    }\n  ]\n```\n\nSo, the output encoded string will result on:\n`W3sidHlwZSI6InByb3BlcnR5IiwicGFyYW1zIjp7Im5hbWUiOiJuYW1lIiwib3BlcmF0b3IiOiJjb250YWlucyIsInZhbHVlIjoiZDAifX1d`\n",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "example": "W3sidHlwZSI6InByb3BlcnR5IiwicGFyYW1zIjp7Im5hbWUiOiJuYW1lIiwib3BlcmF0b3IiOiJjb250YWlucyIsInZhbHVlIjoiZDAifX1d\n"
            },
            "required": false,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/perPageQuery"
          },
          {
            "name": "status",
            "description": "Device's status",
            "schema": {
              "$ref": "#/components/schemas/deviceStatus"
            },
            "required": false,
            "in": "query"
          },
          {
            "name": "sort_by",
            "description": "Device's property to sort of",
            "schema": {
              "type": "string",
              "example": "name"
            },
            "required": false,
            "in": "query"
          },
          {
            "name": "order_by",
            "schema": {
              "description": "Device's list order",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc"
            },
            "required": false,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a list of devices.",
            "headers": {
              "X-Total-Count": {
                "description": "Devices' total number.",
                "schema": {
                  "type": "string",
                  "minimum": 0,
                  "readOnly": true
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/device"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/devices/{uid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deviceUIDPath"
        }
      ],
      "get": {
        "operationId": "getDevice",
        "summary": "Get device",
        "description": "Get a device.",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success get a device.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/device"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteDevice",
        "summary": "Delete device",
        "description": "Delete a device.",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to delete a device."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "patch": {
        "operationId": "updateDeviceName",
        "summary": "Update device name",
        "description": "Update device's name.",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Device's new name.",
                    "type": "string",
                    "example": "example"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to update device's name."
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/sessions": {
      "get": {
        "operationId": "getSessions",
        "summary": "Get sessions",
        "description": "Get a list sessions.",
        "tags": [
          "sessions"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/perPageQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get list of sessions.",
            "headers": {
              "X-Total-Count": {
                "description": "Sessions' total number.",
                "schema": {
                  "type": "string",
                  "minimum": 0,
                  "readOnly": true
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/session"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/sessions/{uid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sessionUIDPath"
        }
      ],
      "get": {
        "operationId": "getSession",
        "summary": "Get session",
        "description": "Get a session.",
        "tags": [
          "sessions"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a session.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/session"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "post": {
        "operationId": "setSessionAuthenticationStatus",
        "summary": "Set session authentication status",
        "description": "Set session authentication status.",
        "tags": [
          "sessions"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "authenticated": {
                    "description": "Session's authentication status.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/sshkeys/public-keys": {
      "get": {
        "operationId": "getPublicKeys",
        "summary": "Get public keys",
        "description": "Get a list from all public keys.",
        "tags": [
          "ssh"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filterQuery"
          },
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/perPageQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a list of public keys.",
            "headers": {
              "X-Total-Count": {
                "description": "Public keys' total number.",
                "schema": {
                  "type": "string",
                  "minimum": 0
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicKeyResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "post": {
        "operationId": "createPublicKey",
        "summary": "Create public key",
        "description": "Create a new public key.",
        "tags": [
          "ssh"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publicKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to create a public key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicKeyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "422": {
            "description": "UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/sshkeys/public-keys/{fingerprint}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/publicKeyFingerprintPath"
        }
      ],
      "patch": {
        "operationId": "updatePublicKey",
        "summary": "Update public key",
        "description": "Update a public key.",
        "tags": [
          "ssh"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Public key's name.",
                    "type": "string",
                    "example": "example"
                  },
                  "username": {
                    "description": "Public key's username.",
                    "type": "string",
                    "example": "example"
                  }
                },
                "required": [
                  "name",
                  "username"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to update a public key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicKeyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "delete": {
        "operationId": "deletePublicKey",
        "summary": "Delete public key",
        "description": "Delete a public key.",
        "tags": [
          "ssh"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to delete a public key."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/sshkeys/public-keys/{fingerprint}/tags": {
      "parameters": [
        {
          "$ref": "#/components/parameters/publicKeyFingerprintPath"
        }
      ],
      "post": {
        "operationId": "addTagPublicKey",
        "summary": "Add tag public key",
        "description": "Add a tag to a public key.",
        "tags": [
          "tags",
          "ssh"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag": {
                    "description": "Public key's tag name.",
                    "$ref": "#/components/schemas/tag"
                  }
                },
                "required": [
                  "tag"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "put": {
        "operationId": "updateTagsPublicKey",
        "summary": "Update tags public key",
        "description": "Update all tags in a public key.",
        "tags": [
          "tags",
          "ssh"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tags": {
                    "description": "Public key's new tags.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/tag"
                    },
                    "minItems": 1,
                    "maxItems": 3
                  }
                },
                "example": {
                  "tags": [
                    "tag1",
                    "tag2",
                    "tag3"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/sshkeys/public-keys/{fingerprint}/tags/{name}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/publicKeyFingerprintPath"
        },
        {
          "$ref": "#/components/parameters/tagNamePath"
        }
      ],
      "delete": {
        "operationId": "removeTagPublicKey",
        "summary": "Remove tag public key",
        "description": "Remove a tag from public key.",
        "tags": [
          "tags",
          "ssh"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okEmpty"
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/stats": {
      "get": {
        "operationId": "getStatusDevices",
        "summary": "Get stats ShellHub instance",
        "description": "Get stats ShellHub instance.",
        "tags": [
          "devices"
        ],
        "responses": {
          "200": {
            "description": "Success get stats from ShellHub instance.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "registered_devices": {
                      "description": "Number of registered devices",
                      "type": "integer",
                      "minimum": 0
                    },
                    "online_devices": {
                      "description": "Number of online devices",
                      "type": "integer",
                      "minimum": 0
                    },
                    "pending_devices": {
                      "description": "Number of pending devices",
                      "type": "integer",
                      "minimum": 0
                    },
                    "rejected_devices": {
                      "description": "Number of rejected devices",
                      "type": "integer",
                      "minimum": 0
                    },
                    "active_sessions": {
                      "description": "Active sessions",
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/namespaces": {
      "get": {
        "operationId": "getNamespaces",
        "summary": "Get namespaces list",
        "description": "Returns a list of namespaces.",
        "tags": [
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "filter",
            "description": "Namespaces's filter.\n\n\nFilter field receives a base64 enconded JSON object for limit a search.\nThe JSON object should have a property called `type`, it will filter by a `property` called `name` where the value should `contains` `examplespace`.\n\nIf you want get only Namespaces name as `examplespace`, the JSON object will looks\nlike this \n\n```json\n[\n  {\n    \"type\":\"property\",\n    \"params\":{\n      \"name\":\"name\",\n      \"operator\":\"contains\",\n      \"value\":\"examplespace\"\n    }\n  }\n]\n```\n\nSo, the output encoded string will result on:\n`W3sidHlwZSI6InByb3BlcnR5IiwicGFyYW1zIjp7Im5hbWUiOiJuYW1lIiwib3BlcmF0b3IiOiJjb250YWlucyIsInZhbHVlIjoiZXhhbXBsZXNwYWNlIn19XQ==`\n",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "example": "W3sidHlwZSI6InByb3BlcnR5IiwicGFyYW1zIjp7Im5hbWUiOiJuYW1lIiwib3BlcmF0b3IiOiJjb250YWlucyIsInZhbHVlIjoiZXhhbXBsZXNwYWNlIn19XQ=="
            },
            "required": false,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/pageQuery"
          },
          {
            "$ref": "#/components/parameters/perPageQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a namespace list.",
            "headers": {
              "X-Total-Count": {
                "description": "Namespaces' total number.",
                "schema": {
                  "type": "string",
                  "minimum": 0
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/namespace"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/namespaces/{tenant}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/namespaceTenantIDPath"
        }
      ],
      "get": {
        "operationId": "getNamespace",
        "summary": "Get a namespace",
        "description": "Get a namespace.",
        "tags": [
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get a namespace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namespace"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "post": {
        "operationId": "createNamespace",
        "summary": "Create namespace",
        "description": "Create a namespace.",
        "tags": [
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/namespaceName"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to create a namespace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namespace"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "put": {
        "operationId": "editNamespace",
        "summary": "Edit namespace",
        "description": "Edit a namespace.",
        "tags": [
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/namespaceName"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to edit a namespace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namespace"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteNamespace",
        "summary": "Delete namespace",
        "description": "Delete a namespace.",
        "tags": [
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to delete a namespace."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/namespaces/{tenant}/members": {
      "post": {
        "operationId": "addNamespaceMember",
        "summary": "Add a member to a namespace",
        "description": "Add a member to a namespace.",
        "tags": [
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/namespaceTenantIDPath"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Member's username.",
                    "type": "string"
                  },
                  "role": {
                    "$ref": "#/components/schemas/namespaceMemberRole"
                  }
                },
                "required": [
                  "username",
                  "role"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to add a member to a namespace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namespace"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/namespaces/{tenant}/members/{uid}": {
      "delete": {
        "operationId": "removeNamespaceMember",
        "summary": "Remove a member from a namespace",
        "description": "Remove a member from a namespace.",
        "tags": [
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/namespaceTenantIDPath"
          },
          {
            "$ref": "#/components/parameters/namespaceMemberIDPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Success to delete a member from namespace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namespace"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "patch": {
        "operationId": "updateNamespaceMember",
        "summary": "Update a member from a namespace",
        "description": "Update a member role from a namespace.",
        "tags": [
          "namespaces"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/namespaceTenantIDPath"
          },
          {
            "$ref": "#/components/parameters/namespaceMemberIDPath"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "$ref": "#/components/schemas/namespaceMemberRole"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to update member role from a namespace."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/devices/{uid}/tags": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deviceUIDPath"
        }
      ],
      "post": {
        "operationId": "createDeviceTag",
        "summary": "Create a tag",
        "description": "Create a tag",
        "tags": [
          "devices",
          "tags"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/tag"
                  }
                },
                "required": [
                  "name"
                ],
                "example": {
                  "name": "tag"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success create a tag"
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "406": {
            "$ref": "#/components/responses/notAcceptableEmpty"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "put": {
        "operationId": "updateTagsDevice",
        "summary": "Update tags to device",
        "description": "Update tags to device",
        "tags": [
          "devices",
          "tags"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deviceTags"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to update tags to device"
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "406": {
            "$ref": "#/components/responses/notAcceptableEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/devices/{uid}/tags/{name}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deviceUIDPath"
        },
        {
          "$ref": "#/components/parameters/deviceTagPath"
        }
      ],
      "delete": {
        "operationId": "deleteDeviceTag",
        "summary": "Delete a tag from device",
        "description": "Delete a tag from device.",
        "tags": [
          "devices",
          "tags"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to delete from device"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/tags": {
      "get": {
        "operationId": "getTags",
        "summary": "Get tags",
        "tags": [
          "tags"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to get tag list.",
            "headers": {
              "X-Total-Count": {
                "description": "Tags' total number.",
                "schema": {
                  "type": "string",
                  "minimum": 0
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "tag1",
                    "tag2",
                    "tag3",
                    "tag4"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/api/tags/{name}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/tagNamePath"
        }
      ],
      "put": {
        "operationId": "renameTag",
        "summary": "Rename a tag name.",
        "tags": [
          "tags"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "New tag's name.",
                    "$ref": "#/components/schemas/tag"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success to update a tag name."
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "409": {
            "$ref": "#/components/responses/conflictEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteTag",
        "summary": "Delete a tag name.",
        "tags": [
          "tags"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success to delete a tag name."
          },
          "400": {
            "$ref": "#/components/responses/badRequestEmpty"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenEmpty"
          },
          "404": {
            "$ref": "#/components/responses/notFoundEmpty"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    }
  }
}