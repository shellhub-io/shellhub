#!/bin/sh

# Evaluate the appropriate Docker Compose command based on availability and V2 compatibility.
#
# If a compatible command is found, it is set to $COMPOSE_COMMAND. If no compatible command
# is found, the function exits with status 1.
evaluate_docker_compose() {
    local COMPOSE_COMMAND

    if docker compose version --short 2> /dev/null | grep -q "^2\."; then
        COMPOSE_COMMAND="docker compose"
    elif docker-compose version --short 2> /dev/null | grep -q "^2\."; then
        COMPOSE_COMMAND="docker-compose"
    fi

    if [ -z "$COMPOSE_COMMAND" ]; then
        echo >&2 "ERROR: Cannot find Docker Compose compatible with V2 spec"
        exit 1
    fi

    echo "$COMPOSE_COMMAND"
}

readlink_f() {
    (if uname | grep -q 'Darwin'; then
	 # Use greadlink if available, otherwise it behaves like "readlink -f" option
         if command -v greadlink >/dev/null 2>&1; then
             greadlink -f "$1"
         else
	         target_file="$1"
	         cd "$(dirname "$target_file")"
	         target_file=$(basename "$target_file")

	         while [ -L "$target_file" ]
	         do
		         target_file=$(readlink "$target_file")
		         cd "$(dirname "$target_file")"
		         target_file=$(basename "$target_file")
	         done

	         echo "$(pwd -P)/$target_file"
         fi
     else
         readlink -f "$1"
     fi)
}

exit_if_not_running() {
  local DOCKER_COMPOSE
  DOCKER_COMPOSE=$(evaluate_docker_compose)

  SERVICES=$($DOCKER_COMPOSE ps -q | grep -v INFO: | xargs docker inspect -f '{{.State.Running}}' 2>/dev/null | grep -c 'true')

  [ "$SERVICES" -le 0 ] && { echo "üö´ ERROR: ShellHub is not running. Exiting."; exit 1; }
}

set -o allexport

env_override=${ENV_OVERRIDE:-./.env.override}
if [ -f "$env_override" ]; then
    echo "INFO: Loading $env_override"
    . "$env_override"
fi

set +o allexport

COMPOSE_FILE="docker-compose.yml"

[ "$SHELLHUB_AUTO_SSL" = "true" ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.autossl.yml"
[ "$SHELLHUB_ENV" = "development" ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.dev.yml:docker-compose.agent.yml"
[ "$SHELLHUB_ENTERPRISE" = "true" ] && [ "$SHELLHUB_ENV" != "development" ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.enterprise.yml"
[ -f docker-compose.override.yml ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.override.yml"

SHELLHUB_DATABASE=${SHELLHUB_DATABASE:-mongo}
case "$SHELLHUB_DATABASE" in
    mongo)
        COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.${SHELLHUB_DATABASE}.yml"
        ;;
    *)
        echo "‚ö†Ô∏è WARNING: Unknown SHELLHUB_DATABASE '$SHELLHUB_DATABASE'. Defaulting to mongodb."
        SHELLHUB_DATABASE="mongodb"
        COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.mongodb.yml"
        ;;
esac

[ -f "$EXTRA_COMPOSE_FILE" ] && COMPOSE_FILE="${COMPOSE_FILE}:${EXTRA_COMPOSE_FILE}"

export COMPOSE_FILE
