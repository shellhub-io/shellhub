package main

import (
	"context"
	"crypto/rsa"
	"math/rand"
	"net"
	"net/http"
	"net/url"
	"os"
	"os/exec"
	"runtime"
	"strings"
	"sync"
	"sync/atomic"
	"time"

	"github.com/Masterminds/semver"
	dockerclient "github.com/docker/docker/client"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
	"github.com/shellhub-io/shellhub/agent/keygen"
	os1 "github.com/shellhub-io/shellhub/agent/os"
	"github.com/shellhub-io/shellhub/agent/os/network"
	server "github.com/shellhub-io/shellhub/agent/ssh"
	"github.com/shellhub-io/shellhub/agent/ssh/modes/container"
	"github.com/shellhub-io/shellhub/agent/ssh/modes/host"
	"github.com/shellhub-io/shellhub/agent/tunnel"
	"github.com/shellhub-io/shellhub/pkg/api/client"
	"github.com/shellhub-io/shellhub/pkg/envs"
	"github.com/shellhub-io/shellhub/pkg/models"
	"github.com/shellhub-io/shellhub/pkg/validator"
	log "github.com/sirupsen/logrus"
)

// Config provides the configuration for the agent service.
type Config struct {
	// Set the ShellHub Cloud server address the agent will use to connect.
	// This is required.
	ServerAddress string `env:"SERVER_ADDRESS,required" validate:"required"`

	// Specify the path to the device private key.
	// If not provided, the agent will generate a new one.
	// This is required.
	PrivateKey string `env:"PRIVATE_KEY,required" validate:"required"`

	// Sets the account tenant id used during communication to associate the
	// device to a specific tenant.
	// This is required.
	TenantID string `env:"TENANT_ID,required" validate:"required"`

	// Determine the interval to send the keep alive message to the server. This
	// has a direct impact of the bandwidth used by the device when in idle
	// state. Default is 30 seconds.
	KeepAliveInterval uint32 `env:"KEEPALIVE_INTERVAL,overwrite,default=30"`

	// Set the device preferred hostname. This provides a hint to the server to
	// use this as hostname if it is available.
	PreferredHostname string `env:"PREFERRED_HOSTNAME"`

	// Set the device preferred identity. This provides a hint to the server to
	// use this identity if it is available.
	PreferredIdentity string `env:"PREFERRED_IDENTITY,default="`

	// Stores the password for single-user mode (without root privileges). If not
	// provided, multi-user mode (with root privileges) is enabled by default.
	// NOTE: The password hash could be generated by ```openssl passwd```.
	SingleUserPassword string `env:"SINGLE_USER_PASSWORD,default=$SIMPLE_USER_PASSWORD"`

	// SimpleUserPassword exists due to a typo on the environmental variable that stores the password for single user
	// mode that was wrongly named `SIMPLE_USER_PASSWORD` instead of `SINGLE_USER_PASSWORD`, and willing to keep the
	// compatibility, this new variable was created.
	SimpleUserPassword string `env:"SIMPLE_USER_PASSWORD"`

	// MaxRetryConnectionTimeout specifies the maximum time, in seconds, that an agent will wait
	// before attempting to reconnect to the ShellHub server. Default is 60 seconds.
	MaxRetryConnectionTimeout int `env:"MAX_RETRY_CONNECTION_TIMEOUT,default=60" validate:"min=10,max=120"`
}

func LoadConfigFromEnv() (*Config, map[string]any, error) {
	// NOTE: When T, the generic parameter, is a structure with required tag, the fallback for an
	// "unprefixed" parameter is used.
	//
	// # Example
	//
	// For the structure below, the parser will parse successfully when the variables exist with or without the
	// prefixes since the "required" tag is set to true.
	//
	//  SHELLHUB_TENANT_ID=00000000-0000-4000-0000-000000000000 SERVER_ADDRESS=http://127.0.0.1
	//  PRIVATE_KEY=/tmp/shellhub sudo -E ./agent
	//
	//  struct {
	//    ServerAddress string `env:"SERVER_ADDRESS,required"`
	//    PrivateKey string `env:"PRIVATE_KEY,required"`
	//    TenantID string `env:"TENANT_ID,required`
	//  }
	//
	// This behavior is driven by the [envconfig] package. Check it out for more information.
	//
	// [envconfig]: https://github.com/sethvargo/go-envconfig
	cfg, err := envs.ParseWithPrefix[Config]("SHELLHUB_")
	if err != nil {
		log.Error("failed to parse the configuration")

		return nil, nil, err
	}

	// TODO: test the envinromental variables validation on integration tests.
	if ok, fields, err := validator.New().StructWithFields(cfg); err != nil || !ok {
		log.WithFields(fields).Error("failed to validate the configuration loaded from envs")

		return nil, fields, err
	}

	return cfg, nil, nil
}

type Agent struct {
	config     *Config
	pubKey     *rsa.PublicKey
	Identity   *models.DeviceIdentity
	Info       *models.DeviceInfo
	authData   *models.DeviceAuthResponse
	cli        client.Client
	serverInfo *models.Info
	server     *server.Server
	tunnel     *tunnel.Tunnel
	listening  chan bool
	closed     atomic.Bool
	sessions   sync.Map
}

// NewAgent creates a new agent instance, requiring the ShellHub server's address to connect to, the namespace's tenant
// where device own and the path to the private key on the file system.
//
// To create a new [Agent] instance with all configurations, you can use [NewAgentWithConfig].
func NewAgent(address string, tenantID string, privateKey string) (*Agent, error) {
	return NewAgentWithConfig(&Config{
		ServerAddress: address,
		TenantID:      tenantID,
		PrivateKey:    privateKey,
	})
}

var (
	ErrNewAgentWithConfigEmptyServerAddress   = errors.New("address is empty")
	ErrNewAgentWithConfigInvalidServerAddress = errors.New("address is invalid")
	ErrNewAgentWithConfigEmptyTenant          = errors.New("tenant is empty")
	ErrNewAgentWithConfigEmptyPrivateKey      = errors.New("private key is empty")
	ErrNewAgentWithConfigNilMode              = errors.New("agent's mode is nil")
)

// NewAgentWithConfig creates a new agent instance with all configurations.
//
// Check [Config] for more information.
func NewAgentWithConfig(config *Config) (*Agent, error) {
	if config.ServerAddress == "" {
		return nil, ErrNewAgentWithConfigEmptyServerAddress
	}

	if _, err := url.ParseRequestURI(config.ServerAddress); err != nil {
		return nil, ErrNewAgentWithConfigInvalidServerAddress
	}

	if config.TenantID == "" {
		return nil, ErrNewAgentWithConfigEmptyTenant
	}

	if config.PrivateKey == "" {
		return nil, ErrNewAgentWithConfigEmptyPrivateKey
	}

	return &Agent{
		config: config,
	}, nil
}

// Initialize initializes the ShellHub Agent, generating device identity, loading device information, generating private
// key, reading public key, probing server information and authorizing device on ShellHub server.
//
// When any of the steps fails, the agent will return an error, and the agent will not be able to start.
func (a *Agent) Initialize() error {
	var err error

	a.cli, err = client.NewClient(a.config.ServerAddress)
	if err != nil {
		return errors.Wrap(err, "failed to create the HTTP client")
	}

	if err := a.generateDeviceIdentity(); err != nil {
		return errors.Wrap(err, "failed to generate device identity")
	}

	if err := a.loadDeviceInfo(); err != nil {
		return errors.Wrap(err, "failed to load device info")
	}

	if err := a.generatePrivateKey(); err != nil {
		return errors.Wrap(err, "failed to generate private key")
	}

	if err := a.readPublicKey(); err != nil {
		return errors.Wrap(err, "failed to read public key")
	}

	if err := a.probeServerInfo(); err != nil {
		return errors.Wrap(err, "failed to probe server info")
	}

	if err := a.authorize(); err != nil {
		return errors.Wrap(err, "failed to authorize device")
	}

	a.closed.Store(false)

	return nil
}

// generatePrivateKey generates a new private key if it doesn't exist on the filesystem.
func (a *Agent) generatePrivateKey() error {
	if _, err := os.Stat(a.config.PrivateKey); os.IsNotExist(err) {
		if err := keygen.GeneratePrivateKey(a.config.PrivateKey); err != nil {
			return err
		}
	}

	return nil
}

func (a *Agent) readPublicKey() error {
	key, err := keygen.ReadPublicKey(a.config.PrivateKey)
	a.pubKey = key

	return err
}

// generateDeviceIdentity generates a device identity.
//
// The default value for Agent Identity is a network interface MAC address, but if the `SHELLHUB_PREFERRED_IDENTITY` is
// defined and set on [Config] structure, the device identity is set to this value.
func (a *Agent) generateDeviceIdentity() error {
	if id := a.config.PreferredIdentity; id != "" {
		a.Identity = &models.DeviceIdentity{
			MAC: id,
		}

		return nil
	}

	// get identity from network interface.
	iface, err := network.PrimaryInterface()
	if err != nil {
		return err
	}

	a.Identity = &models.DeviceIdentity{
		MAC: iface.HardwareAddr.String(),
	}

	return nil
}

// loadDeviceInfo load some device informations like OS name, version, arch and platform.
func (a *Agent) loadDeviceInfo() error {
	osrelease, err := os1.GetOSRelease()
	if err != nil {
		return err
	}

	a.Info = &models.DeviceInfo{
		ID:         osrelease.ID,
		PrettyName: osrelease.Name,
		Version:    AgentVersion,
		Platform:   AgentPlatform,
		Arch:       runtime.GOARCH,
	}

	return nil
}

// probeServerInfo gets information about the ShellHub server.
func (a *Agent) probeServerInfo() error {
	info, err := a.cli.GetInfo(AgentVersion)
	a.serverInfo = info

	return err
}

var ErrNoIdentityAndHostname = errors.New("the device doesn't have a valid hostname and identity. Set PREFERRED_IDENTITY or PREFERRED_HOSTNAME to specify the device's name and identity")

// authorize send auth request to the server with device information in order to register it in the namespace.
func (a *Agent) authorize() error {
	req := &models.DeviceAuthRequest{
		Info: a.Info,
		DeviceAuth: &models.DeviceAuth{
			Hostname:  a.config.PreferredHostname,
			Identity:  a.Identity,
			TenantID:  a.config.TenantID,
			PublicKey: string(keygen.EncodePublicKeyToPem(a.pubKey)),
		},
	}

	// NOTE: A MAC address can be empty when the network interface used to communicate with the external world isn't a
	// physical one. In this case, we should be able to define a custom value for MAC's field using the
	// [PREFERRED_IDENTITY] variable. If the hostname is also empty, [PREFERRED_HOSTNAME] could be defined to provide a
	// fallback identifier for the device. This ensures that even if both the MAC address and hostname are missing, we
	// have a way to identify the device uniquely. When it occurs, and no variable was defined, the agent should fail to
	// initialize.
	if req.DeviceAuth.Hostname == "" && (req.DeviceAuth.Identity == nil || req.DeviceAuth.Identity.MAC == "") {
		return ErrNoIdentityAndHostname
	}

	data, err := a.cli.AuthDevice(req)
	if err != nil {
		return err
	}

	a.authData = data

	return err
}

func (a *Agent) isClosed() bool {
	return a.closed.Load()
}

// Close closes the ShellHub Agent's listening, stoping it from receive new connection requests.
func (a *Agent) Close() error {
	a.closed.Store(true)

	return a.tunnel.Close()
}

func sshHandler(agent *Agent) func(c echo.Context) error {
	return func(c echo.Context) error {
		hj, ok := c.Response().Writer.(http.Hijacker)
		if !ok {
			return c.String(http.StatusInternalServerError, "webserver doesn't support hijacking")
		}

		conn, _, err := hj.Hijack()
		if err != nil {
			return c.String(http.StatusInternalServerError, "failed to hijack connection")
		}

		id := c.Param("id")
		httpConn := c.Request().Context().Value(tunnel.TunnelContextKeyHTTPConn).(net.Conn)
		agent.sessions.Store(id, httpConn)
		agent.server.HandleConn(httpConn)

		return conn.Close()
	}
}

func sshCloseHandler(agent *Agent) func(c echo.Context) error {
	return func(c echo.Context) error {
		id := c.Param("id")

		agent.CloseSession(id)

		log.WithFields(
			log.Fields{
				"id":             id,
				"version":        AgentVersion,
				"tenant_id":      agent.authData.Namespace,
				"server_address": agent.config.ServerAddress,
			},
		).Info("A tunnel connection was closed")

		return nil
	}
}

func sshContainerHandler(ag *Agent) func(c echo.Context) error {
	return func(c echo.Context) error {
		session := c.Param("session")
		if session == "" {
			return c.String(http.StatusBadRequest, "session id is required")
		}

		containerID := c.Param("container")
		if containerID == "" {
			return c.String(http.StatusBadRequest, "container id is required")
		}

		logger := log.WithFields(log.Fields{
			"session":   session,
			"container": containerID,
			"version":   AgentVersion,
			"tenant_id": ag.authData.Namespace,
		})

		hj, ok := c.Response().Writer.(http.Hijacker)
		if !ok {
			logger.Error("webserver doesn't support hijacking")

			return c.String(http.StatusInternalServerError, "webserver doesn't support hijacking")
		}

		conn, _, err := hj.Hijack()
		if err != nil {
			logger.WithError(err).Error("failed to hijack connection")

			return c.String(http.StatusInternalServerError, "failed to hijack connection")
		}

		defer conn.Close()

		// TODO: Use the same client for all requests.
		docker, err := dockerclient.NewClientWithOpts(dockerclient.FromEnv, dockerclient.WithAPIVersionNegotiation())
		if err != nil {
			return err
		}

		defer docker.Close()

		server := server.NewServer(
			ag.cli,
			&container.Mode{
				Authenticator: container.NewAuthenticator(docker, ag.cli, ag.authData, containerID),
				Sessioner:     container.NewSessioner(docker, containerID),
			},
			&server.Config{
				PrivateKey:        ag.config.PrivateKey,
				KeepAliveInterval: ag.config.KeepAliveInterval,
				Features:          server.NoFeature,
			},
		)

		defer func() {
			// NOTE: The server is closed after the connection is handled, so it doesn't interfere with the next
			// connection. We also set the server to nil to avoid memory leaks as we create a new server for each
			// connection due to server dependency of container ID.
			server = nil //nolint:staticcheck
		}()

		httpConn := c.Request().Context().Value(tunnel.TunnelContextKeyHTTPConn).(net.Conn)

		ag.sessions.Store(session, httpConn)
		defer ag.CloseSession(session)

		server.HandleConn(httpConn)

		return nil
	}
}

// Listen creates the SSH server and listening for connections.
func (a *Agent) Listen(ctx context.Context) error {
	a.tunnel = tunnel.NewTunnel()

	a.server = server.NewServer(
		a.cli,
		&host.Mode{
			Authenticator: host.NewAuthenticator(a.cli, a.authData, a.config.SingleUserPassword, &a.authData.Name),
			Sessioner:     host.NewSessioner(&a.authData.Name, make(map[string]*exec.Cmd)),
		},
		&server.Config{
			PrivateKey:        a.config.PrivateKey,
			KeepAliveInterval: a.config.KeepAliveInterval,
			Features:          server.LocalPortForwardFeature,
		},
	)

	a.tunnel.SSHHandler = sshHandler(a)
	a.tunnel.SSHCloseHandler = sshCloseHandler(a)

	a.tunnel.SSHContainerHandler = sshContainerHandler(a)

	go a.ping(ctx, AgentPingDefaultInterval) //nolint:errcheck

	ctx, cancel := context.WithCancel(ctx)
	go func() {
		for {
			if a.isClosed() {
				log.WithFields(log.Fields{
					"version":        AgentVersion,
					"tenant_id":      a.authData.Namespace,
					"server_address": a.config.ServerAddress,
				}).Info("Stopped listening for connections")

				cancel()

				return
			}

			namespace := a.authData.Namespace
			tenantName := a.authData.Name
			sshEndpoint := a.serverInfo.Endpoints.SSH

			sshid := strings.NewReplacer(
				"{namespace}", namespace,
				"{tenantName}", tenantName,
				"{sshEndpoint}", strings.Split(sshEndpoint, ":")[0],
			).Replace("{namespace}.{tenantName}@{sshEndpoint}")

			listener, err := a.cli.NewReverseListener(ctx, a.authData.Token, "/ssh/connection")
			if err != nil {
				log.WithError(err).WithFields(log.Fields{
					"version":        AgentVersion,
					"tenant_id":      a.authData.Namespace,
					"server_address": a.config.ServerAddress,
					"ssh_server":     sshEndpoint,
					"sshid":          sshid,
				}).Error("Failed to connect to server through reverse tunnel. Retry in 10 seconds")
				time.Sleep(time.Second * 10)

				continue
			}

			log.WithFields(log.Fields{
				"namespace":      namespace,
				"hostname":       tenantName,
				"server_address": a.config.ServerAddress,
				"ssh_server":     sshEndpoint,
				"sshid":          sshid,
			}).Info("Server connection established")

			a.listening <- true

			{
				// NOTE: Tunnel'll only realize that it lost its connection to the ShellHub SSH when the next
				// "keep-alive" connection fails. As a result, it will take this interval to reconnect to its server.
				err := a.tunnel.Listen(listener)

				log.WithError(err).WithFields(log.Fields{
					"namespace":      namespace,
					"hostname":       tenantName,
					"server_address": a.config.ServerAddress,
					"ssh_server":     sshEndpoint,
					"sshid":          sshid,
				}).Info("Tunnel listener closed")

				listener.Close() // nolint:errcheck
			}

			a.listening <- false
		}
	}()

	<-ctx.Done()

	return a.Close()
}

// AgentPingDefaultInterval is the default value for the ping interval when the agent is listening for connections.
const AgentPingDefaultInterval = 10 * time.Minute

// ping sends an authorization request to the ShellHub server at each interval.
// A random value between 10 and [config.MaxRetryConnectionTimeout] seconds is added to the interval
// each time the ticker is executed.
//
// Ping only sends requests to the server if the agent is listening for connections. If the agent is not
// listening, the ping process will be stopped. When the interval is 0, the default value is 10 minutes.
func (a *Agent) ping(ctx context.Context, interval time.Duration) error {
	a.listening = make(chan bool)

	if interval == 0 {
		interval = AgentPingDefaultInterval
	}

	<-a.listening // NOTE: wait for the first connection to start to ping the server.
	ticker := time.NewTicker(interval)

	for {
		if a.isClosed() {
			return nil
		}

		select {
		case <-ctx.Done():
			log.WithFields(log.Fields{
				"version":        AgentVersion,
				"tenant_id":      a.authData.Namespace,
				"server_address": a.config.ServerAddress,
			}).Debug("stopped pinging server due to context cancellation")

			return nil
		case ok := <-a.listening:
			if ok {
				log.WithFields(log.Fields{
					"version":        AgentVersion,
					"tenant_id":      a.authData.Namespace,
					"server_address": a.config.ServerAddress,
					"timestamp":      time.Now(),
				}).Debug("Starting the ping interval to server")

				ticker.Reset(interval)
			} else {
				log.WithFields(log.Fields{
					"version":        AgentVersion,
					"tenant_id":      a.authData.Namespace,
					"server_address": a.config.ServerAddress,
					"timestamp":      time.Now(),
				}).Debug("Stopped pinging server due listener status")

				ticker.Stop()
			}
		case <-ticker.C:
			if err := a.authorize(); err != nil {
				a.server.SetDeviceName(a.authData.Name)
			}

			log.WithFields(log.Fields{
				"version":        AgentVersion,
				"tenant_id":      a.authData.Namespace,
				"server_address": a.config.ServerAddress,
				"name":           a.authData.Name,
				"hostname":       a.config.PreferredHostname,
				"identity":       a.config.PreferredIdentity,
				"timestamp":      time.Now(),
			}).Info("Ping")

			randTimeout := time.Duration(rand.Intn(a.config.MaxRetryConnectionTimeout-10)+10) * time.Second //nolint:gosec
			ticker.Reset(interval + randTimeout)
		}
	}
}

// CheckUpdate gets the ShellHub's server version.
func (a *Agent) CheckUpdate() (*semver.Version, error) {
	info, err := a.cli.GetInfo(AgentVersion)
	if err != nil {
		return nil, err
	}

	return semver.NewVersion(info.Version)
}

// GetInfo gets the ShellHub's server information like version and endpoints, and updates the Agent's server's info.
func (a *Agent) GetInfo() (*models.Info, error) {
	if a.serverInfo != nil {
		return a.serverInfo, nil
	}

	info, err := a.cli.GetInfo(AgentVersion)
	if err != nil {
		return nil, err
	}

	a.serverInfo = info

	return info, nil
}

// CloseSession closes the session with the given id. If the session exists, it will close the connection and remove it
// from the sessions map.
func (a *Agent) CloseSession(id string) {
	if v, ok := a.sessions.Load(id); ok {
		if conn, ok := v.(net.Conn); ok {
			conn.Close() //nolint:errcheck
		}

		a.sessions.Delete(id)
		log.WithFields(log.Fields{
			"id":             id,
			"version":        AgentVersion,
			"tenant_id":      a.authData.Namespace,
			"server_address": a.config.ServerAddress,
		}).Info("Closed session")
	}
}

// GetInfo gets information like the version and the enpoints for HTTP and SSH to ShellHub server.
func GetInfo(cfg *Config) (*models.Info, error) {
	cli, err := client.NewClient(cfg.ServerAddress)
	if err != nil {
		return nil, errors.Wrap(err, "failed to create the HTTP client")
	}

	info, err := cli.GetInfo(AgentVersion)
	if err != nil {
		return nil, err
	}

	return info, nil
}
