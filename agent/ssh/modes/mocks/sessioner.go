// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	ssh "github.com/gliderlabs/ssh"
)

// Sessioner is an autogenerated mock type for the Sessioner type
type Sessioner struct {
	mock.Mock
}

// Exec provides a mock function with given fields: session
func (_m *Sessioner) Exec(session ssh.Session) error {
	ret := _m.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ssh.Session) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Heredoc provides a mock function with given fields: session
func (_m *Sessioner) Heredoc(session ssh.Session) error {
	ret := _m.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for Heredoc")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ssh.Session) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SFTP provides a mock function with given fields: session
func (_m *Sessioner) SFTP(session ssh.Session) error {
	ret := _m.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for SFTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ssh.Session) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shell provides a mock function with given fields: session
func (_m *Sessioner) Shell(session ssh.Session) error {
	ret := _m.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for Shell")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ssh.Session) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSessioner creates a new instance of Sessioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sessioner {
	mock := &Sessioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
