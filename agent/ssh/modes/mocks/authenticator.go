// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	ssh "github.com/gliderlabs/ssh"
)

// Authenticator is an autogenerated mock type for the Authenticator type
type Authenticator struct {
	mock.Mock
}

// Password provides a mock function with given fields: ctx, user, password
func (_m *Authenticator) Password(ctx ssh.Context, user string, password string) bool {
	ret := _m.Called(ctx, user, password)

	if len(ret) == 0 {
		panic("no return value specified for Password")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(ssh.Context, string, string) bool); ok {
		r0 = rf(ctx, user, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PublicKey provides a mock function with given fields: ctx, user, key
func (_m *Authenticator) PublicKey(ctx ssh.Context, user string, key ssh.PublicKey) bool {
	ret := _m.Called(ctx, user, key)

	if len(ret) == 0 {
		panic("no return value specified for PublicKey")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(ssh.Context, string, ssh.PublicKey) bool); ok {
		r0 = rf(ctx, user, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewAuthenticator creates a new instance of Authenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authenticator {
	mock := &Authenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
