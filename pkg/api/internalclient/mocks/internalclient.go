// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	internalclient "github.com/shellhub-io/shellhub/pkg/api/internalclient"
	mock "github.com/stretchr/testify/mock"

	models "github.com/shellhub-io/shellhub/pkg/models"

	requests "github.com/shellhub-io/shellhub/pkg/api/requests"

	websocket "github.com/gorilla/websocket"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// BillingEvaluate provides a mock function with given fields: ctx, tenantID
func (_m *Client) BillingEvaluate(ctx context.Context, tenantID string) (*models.BillingEvaluation, error) {
	ret := _m.Called(ctx, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for BillingEvaluate")
	}

	var r0 *models.BillingEvaluation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.BillingEvaluation, error)); ok {
		return rf(ctx, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.BillingEvaluation); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BillingEvaluation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BillingReport provides a mock function with given fields: ctx, tenant, action
func (_m *Client) BillingReport(ctx context.Context, tenant string, action string) error {
	ret := _m.Called(ctx, tenant, action)

	if len(ret) == 0 {
		panic("no return value specified for BillingReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tenant, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePrivateKey provides a mock function with given fields: ctx
func (_m *Client) CreatePrivateKey(ctx context.Context) (*models.PrivateKey, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateKey")
	}

	var r0 *models.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.PrivateKey, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.PrivateKey); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceLookup provides a mock function with given fields: ctx, tenantID, name
func (_m *Client) DeviceLookup(ctx context.Context, tenantID string, name string) (*models.Device, error) {
	ret := _m.Called(ctx, tenantID, name)

	if len(ret) == 0 {
		panic("no return value specified for DeviceLookup")
	}

	var r0 *models.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Device, error)); ok {
		return rf(ctx, tenantID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Device); ok {
		r0 = rf(ctx, tenantID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenantID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DevicesHeartbeat provides a mock function with given fields: ctx, uid
func (_m *Client) DevicesHeartbeat(ctx context.Context, uid string) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for DevicesHeartbeat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DevicesOffline provides a mock function with given fields: ctx, uid
func (_m *Client) DevicesOffline(ctx context.Context, uid string) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for DevicesOffline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EvaluateKey provides a mock function with given fields: ctx, fingerprint, dev, username
func (_m *Client) EvaluateKey(ctx context.Context, fingerprint string, dev *models.Device, username string) (bool, error) {
	ret := _m.Called(ctx, fingerprint, dev, username)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateKey")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Device, string) (bool, error)); ok {
		return rf(ctx, fingerprint, dev, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Device, string) bool); ok {
		r0 = rf(ctx, fingerprint, dev, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.Device, string) error); ok {
		r1 = rf(ctx, fingerprint, dev, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventSessionStream provides a mock function with given fields: ctx, uid
func (_m *Client) EventSessionStream(ctx context.Context, uid string) (*websocket.Conn, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for EventSessionStream")
	}

	var r0 *websocket.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*websocket.Conn, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *websocket.Conn); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*websocket.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinishSession provides a mock function with given fields: ctx, uid
func (_m *Client) FinishSession(ctx context.Context, uid string) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for FinishSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FirewallEvaluate provides a mock function with given fields: ctx, lookup
func (_m *Client) FirewallEvaluate(ctx context.Context, lookup map[string]string) error {
	ret := _m.Called(ctx, lookup)

	if len(ret) == 0 {
		panic("no return value specified for FirewallEvaluate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) error); ok {
		r0 = rf(ctx, lookup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDevice provides a mock function with given fields: ctx, uid
func (_m *Client) GetDevice(ctx context.Context, uid string) (*models.Device, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetDevice")
	}

	var r0 *models.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Device, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Device); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicKey provides a mock function with given fields: ctx, fingerprint, tenant
func (_m *Client) GetPublicKey(ctx context.Context, fingerprint string, tenant string) (*models.PublicKey, error) {
	ret := _m.Called(ctx, fingerprint, tenant)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKey")
	}

	var r0 *models.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.PublicKey, error)); ok {
		return rf(ctx, fingerprint, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.PublicKey); ok {
		r0 = rf(ctx, fingerprint, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, fingerprint, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteMember provides a mock function with given fields: ctx, tenantID, userID, forwardedHost
func (_m *Client) InviteMember(ctx context.Context, tenantID string, userID string, forwardedHost string) error {
	ret := _m.Called(ctx, tenantID, userID, forwardedHost)

	if len(ret) == 0 {
		panic("no return value specified for InviteMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, tenantID, userID, forwardedHost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeepAliveSession provides a mock function with given fields: ctx, uid
func (_m *Client) KeepAliveSession(ctx context.Context, uid string) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for KeepAliveSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDevices provides a mock function with given fields: ctx
func (_m *Client) ListDevices(ctx context.Context) ([]models.Device, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListDevices")
	}

	var r0 []models.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Device, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Device); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lookup provides a mock function with given fields: ctx, lookup
func (_m *Client) Lookup(ctx context.Context, lookup map[string]string) (string, error) {
	ret := _m.Called(ctx, lookup)

	if len(ret) == 0 {
		panic("no return value specified for Lookup")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) (string, error)); ok {
		return rf(ctx, lookup)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) string); ok {
		r0 = rf(ctx, lookup)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, lookup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupWebEndpoints provides a mock function with given fields: ctx, address
func (_m *Client) LookupWebEndpoints(ctx context.Context, address string) (*internalclient.WebEndpoint, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for LookupWebEndpoints")
	}

	var r0 *internalclient.WebEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*internalclient.WebEndpoint, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *internalclient.WebEndpoint); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalclient.WebEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceLookup provides a mock function with given fields: ctx, tenant
func (_m *Client) NamespaceLookup(ctx context.Context, tenant string) (*models.Namespace, error) {
	ret := _m.Called(ctx, tenant)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceLookup")
	}

	var r0 *models.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Namespace, error)); ok {
		return rf(ctx, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Namespace); ok {
		r0 = rf(ctx, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveSession provides a mock function with given fields: ctx, uid, seat
func (_m *Client) SaveSession(ctx context.Context, uid string, seat int) error {
	ret := _m.Called(ctx, uid, seat)

	if len(ret) == 0 {
		panic("no return value specified for SaveSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, uid, seat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionAsAuthenticated provides a mock function with given fields: ctx, uid
func (_m *Client) SessionAsAuthenticated(ctx context.Context, uid string) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for SessionAsAuthenticated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionCreate provides a mock function with given fields: ctx, session
func (_m *Client) SessionCreate(ctx context.Context, session requests.SessionCreate) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for SessionCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.SessionCreate) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSession provides a mock function with given fields: ctx, uid, model
func (_m *Client) UpdateSession(ctx context.Context, uid string, model *models.SessionUpdate) error {
	ret := _m.Called(ctx, uid, model)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.SessionUpdate) error); ok {
		r0 = rf(ctx, uid, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
