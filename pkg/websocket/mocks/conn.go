// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	io "io"

	gorillawebsocket "github.com/gorilla/websocket"

	mock "github.com/stretchr/testify/mock"

	net "net"

	time "time"
)

// Conn is an autogenerated mock type for the Conn type
type Conn struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *Conn) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseHandler provides a mock function with no fields
func (_m *Conn) CloseHandler() func(int, string) error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseHandler")
	}

	var r0 func(int, string) error
	if rf, ok := ret.Get(0).(func() func(int, string) error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(int, string) error)
		}
	}

	return r0
}

// EnableWriteCompression provides a mock function with given fields: enable
func (_m *Conn) EnableWriteCompression(enable bool) {
	_m.Called(enable)
}

// LocalAddr provides a mock function with no fields
func (_m *Conn) LocalAddr() net.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalAddr")
	}

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// NextReader provides a mock function with no fields
func (_m *Conn) NextReader() (int, io.Reader, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NextReader")
	}

	var r0 int
	var r1 io.Reader
	var r2 error
	if rf, ok := ret.Get(0).(func() (int, io.Reader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() io.Reader); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.Reader)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NextWriter provides a mock function with given fields: messageType
func (_m *Conn) NextWriter(messageType int) (io.WriteCloser, error) {
	ret := _m.Called(messageType)

	if len(ret) == 0 {
		panic("no return value specified for NextWriter")
	}

	var r0 io.WriteCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (io.WriteCloser, error)); ok {
		return rf(messageType)
	}
	if rf, ok := ret.Get(0).(func(int) io.WriteCloser); ok {
		r0 = rf(messageType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(messageType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PingHandler provides a mock function with no fields
func (_m *Conn) PingHandler() func(string) error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PingHandler")
	}

	var r0 func(string) error
	if rf, ok := ret.Get(0).(func() func(string) error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(string) error)
		}
	}

	return r0
}

// PongHandler provides a mock function with no fields
func (_m *Conn) PongHandler() func(string) error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PongHandler")
	}

	var r0 func(string) error
	if rf, ok := ret.Get(0).(func() func(string) error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(string) error)
		}
	}

	return r0
}

// ReadJSON provides a mock function with given fields: _a0
func (_m *Conn) ReadJSON(_a0 interface{}) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ReadJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadMessage provides a mock function with no fields
func (_m *Conn) ReadMessage() (int, []byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadMessage")
	}

	var r0 int
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func() (int, []byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() []byte); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoteAddr provides a mock function with no fields
func (_m *Conn) RemoteAddr() net.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoteAddr")
	}

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// SetCloseHandler provides a mock function with given fields: h
func (_m *Conn) SetCloseHandler(h func(int, string) error) {
	_m.Called(h)
}

// SetCompressionLevel provides a mock function with given fields: level
func (_m *Conn) SetCompressionLevel(level int) error {
	ret := _m.Called(level)

	if len(ret) == 0 {
		panic("no return value specified for SetCompressionLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(level)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPingHandler provides a mock function with given fields: h
func (_m *Conn) SetPingHandler(h func(string) error) {
	_m.Called(h)
}

// SetPongHandler provides a mock function with given fields: h
func (_m *Conn) SetPongHandler(h func(string) error) {
	_m.Called(h)
}

// SetReadDeadline provides a mock function with given fields: t
func (_m *Conn) SetReadDeadline(t time.Time) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetReadDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetReadLimit provides a mock function with given fields: limit
func (_m *Conn) SetReadLimit(limit int64) {
	_m.Called(limit)
}

// SetWriteDeadline provides a mock function with given fields: t
func (_m *Conn) SetWriteDeadline(t time.Time) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetWriteDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subprotocol provides a mock function with no fields
func (_m *Conn) Subprotocol() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Subprotocol")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UnderlyingConn provides a mock function with no fields
func (_m *Conn) UnderlyingConn() net.Conn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UnderlyingConn")
	}

	var r0 net.Conn
	if rf, ok := ret.Get(0).(func() net.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	return r0
}

// WriteControl provides a mock function with given fields: messageType, data, deadline
func (_m *Conn) WriteControl(messageType int, data []byte, deadline time.Time) error {
	ret := _m.Called(messageType, data, deadline)

	if len(ret) == 0 {
		panic("no return value specified for WriteControl")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte, time.Time) error); ok {
		r0 = rf(messageType, data, deadline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteMessage provides a mock function with given fields: messageType, data
func (_m *Conn) WriteMessage(messageType int, data []byte) error {
	ret := _m.Called(messageType, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = rf(messageType, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WritePreparedMessage provides a mock function with given fields: pm
func (_m *Conn) WritePreparedMessage(pm *gorillawebsocket.PreparedMessage) error {
	ret := _m.Called(pm)

	if len(ret) == 0 {
		panic("no return value specified for WritePreparedMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorillawebsocket.PreparedMessage) error); ok {
		r0 = rf(pm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConn creates a new instance of Conn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *Conn {
	mock := &Conn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
